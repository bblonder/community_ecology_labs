library(plyr)
library(data.table)
library(plyr)
library(ggplot2)
library(ggpubr)
library(RColorBrewer)
library(magick)
library(cowplot)
metadata <- read.csv('/Users/benjaminblonder/Documents/Oxford/bali - borneo/venation samples - borneo/venation data manuscript/prep metadata for BALI veins/Metadata.csv')
metadata$site <- sapply(metadata$code, function(x) { z <- strsplit(as.character(x),"-"); z[[1]][1]  })
metadata$family[metadata$family==""] <- "Indet"
counts_roi <- read.csv("/Users/benjaminblonder/Documents/Oxford/mark fricker hao xu vein collaboration/pixel counts/groundtruth_roi_counts.csv")
counts_roi$code <- gsub("_roi.png","",gsub("groundtruth_roi/","",counts_roi$file,fixed=TRUE),fixed=TRUE)
names(counts_roi)[names(counts_roi)=="count"] <- "count.roi"
counts_slc <- read.csv("/Users/benjaminblonder/Documents/Oxford/mark fricker hao xu vein collaboration/pixel counts/slc_counts.csv")
counts_slc $code <- gsub("_slc.png","",gsub("slc/","", counts_slc $file,fixed=TRUE),fixed=TRUE)
names(counts_slc)[names(counts_slc)=="count"] <- "count.slc"
# load in masks as well
metadata <- join(metadata, counts_roi[,c("code","count.roi")], by="code")
metadata <- join(metadata, counts_slc[,c("code","count.slc")], by="code")
#
family_counts <- rbindlist(by(metadata, metadata$family, function(x) {data.frame(family=x$family[1], nspecies=length(unique(x$species)))}))
col_brewer <- brewer.pal(n=8,"Set2")
g_numsamples <- ggplot(metadata,aes(x=reorder(family,family,length))) +
geom_bar(stat="count",fill=I(col_brewer[1])) +
theme_bw() +
coord_flip() +
#scale_y_sqrt() +
xlab("Family") + ylab("Number of samples")
g_numspecies <- ggplot(family_counts,aes(x=reorder(family,nspecies,sum),y=nspecies)) +
geom_bar(stat="identity",fill=I(col_brewer[2])) +
theme_bw() +
coord_flip() +
#scale_y_sqrt() +
xlab("Family") + ylab("Number of species")
g_counts_taxonomy <- ggarrange(g_numsamples, g_numspecies,align="hv",labels="AUTO")
ggsave(g_counts_taxonomy, file="g_counts_taxonomy.pdf",width=9,height=6)
g_numsites <- ggplot(metadata,aes(x=reorder(site,site,length))) +
geom_bar(stat="count",fill=I(col_brewer[3])) +
theme_bw() +
coord_flip() +
#scale_y_sqrt() +
xlab("Site") + ylab("Number of samples")
ggsave(g_numsites,file="g_numsites.pdf",width=6,height=6)
g_numpixels_roi <- ggplot(metadata, aes(x=I(count.roi/1e6))) +
geom_histogram(bins=100,fill=I(col_brewer[5])) +
#scale_x_sqrt() +
xlab("Number of ground-truth pixels in traced ROI (million)") +
ylab("Number of samples") +
theme_bw() +
geom_vline(xintercept = median(metadata$count.roi/1e6),col=I("red"))
g_numpixels_slc <- ggplot(metadata, aes(x=I(count.slc/1e6))) +
geom_histogram(bins=100,fill=I(col_brewer[6])) +
#scale_x_sqrt() +
xlab("Number of pixels in ROI (million)") +
ylab("Number of samples") +
theme_bw() +
geom_vline(xintercept = median(metadata$count.slc/1e6),col=I("red"))
# make a graph for the total # of pixels
g_numpixels <- ggarrange(g_numpixels_roi, g_numpixels_slc, align="hv",labels="AUTO")
ggsave(g_numpixels,file="g_numpixels.pdf",width=9,height=5)
# load in some images
rewrite_code <- function(file)
{
code = file
# remove bad ones
code[grepl("bad",code)] <- NA
code = gsub("_Graphs.mat","",code,fixed=TRUE)
code = gsub("_HLD_results.csv","",code,fixed=TRUE)
code = gsub("-CLAHEm-bad","",code,fixed=TRUE)
code = gsub("-CLAHEm","",code,fixed=TRUE)
code = gsub("-CLAHE","",code,fixed=TRUE)
code = gsub("_bis_3","",code,fixed=TRUE)
code = gsub("_bis","",code,fixed=TRUE)
code = gsub("-B[123]","-B",code)
code = gsub(" (R)","",code,fixed=TRUE)
code = gsub(" (R2)","",code,fixed=TRUE)
code = gsub(" (R3)","",code,fixed=TRUE)
code = gsub(" (2)","",code,fixed=TRUE)
code = gsub("BS2","BS",code,fixed=TRUE)
code = gsub("BSHBIS","BSH",code,fixed=TRUE)
# fix other substantive issues of renaming
code = gsub("SER-T42-BS","SER-T42-BSH",code,fixed=TRUE) # changed to shade in trait data
code = gsub("BNT-T153-BSH","BNT-T153-BS",code,fixed=TRUE) # changed to sun in trait data
code = gsub("BNT-T3980-BSH","BNT-T3480-BSH",code,fixed=TRUE) # probable handwriting/typo issue
code = gsub("BNT-T2685-BS","BNT-T2686-BS",code,fixed=TRUE) # probable handwriting/typo issue
code = gsub("BSO-T571-BSH","BSO-T571-BS",code,fixed=TRUE) # probable handwriting/typo issue
code = gsub("DAF2-T112861-BS","DAF2-T112861-BSH",code,fixed=TRUE) # probable handwriting/typo issue
code = gsub("DAS1-T010370-BS","DAS1-T020370-BS",code,fixed=TRUE) # probable handwriting/typo issue
code = gsub("DAS1-T020290-BSH","DAS1-T020290-BS",code,fixed=TRUE) # probable handwriting/typo issue
code = gsub("DAS1-T020523-BS","DAS1-T020523-BSH",code,fixed=TRUE) # probable handwriting/typo issue
code = gsub("ESA-T136-BSH","ESA-T236-BS",code,fixed=TRUE) # probable handwriting/typo issue # could also be ESA-T163-BS
code = gsub("ESA-T559-BSH","ESA-T559-BS",code,fixed=TRUE) # probable handwriting/typo issue
code = gsub("SER-T476-BS","SER-T476-BSH",code,fixed=TRUE) # probable handwriting/typo issue
code = gsub("SLF-T195-BS","SLF-T195-BSH",code,fixed=TRUE) # probable handwriting/typo issue
code = gsub("SLF-T56-BSH","SLF-T56-BS",code,fixed=TRUE) # probable handwriting/typo issue
code[code %in% c("DAS1-T000000-B2SH",
"BSO-G1101-B1S",
"BSO-G1102-B1S",
"BSO-G1502-B1S",
"BSO-G1503-B1S",
"BSO-G1702-B1S",
"BSO-G1703-B1S",
"DAS1-T040935-B2SH",
"ESA-G1701-B1S",
"DAS1-T000000-BSH")] <- NA
code[grepl("bad",code)] <- NA
return(code)
}
raw_files <- c("ESA-T166-B2S-CLAHEm","ESA-T160-B1SH-CLAHEm_HLD","ESA-T402-B2S-CLAHEm","BEL-T44-B2S (R3)-CLAHEm", "DAS1-T010542-B2SH (R)-CLAHEm", "SLF-T3694-B2SH (R)-CLAHEm", "DAS1-T050189-B2S (R)-CLAHEm", "BNT-T245-B2S-CLAHEm", "SER-T308-B2S-CLAHEm","SLF-T52-B2S-CLAHEm")
contrasting_codes <- sapply(raw_files,rewrite_code)
contrasting_codes <- contrasting_codes[contrasting_codes %in% unique(metadata$code)]
contrasting_codes <- data.frame(image=names(contrasting_codes),code=contrasting_codes)
contrasting_codes <- join(contrasting_codes, metadata[,c("code","species","family")],by="code")
contrasting_codes
contrasting_codes <- contrasting_codes[c(1,2,4,6),]
# or pick others...
# load in the images
image_dir <- 'full images'
contrasting_codes$path_image <- paste(image_dir, "/", contrasting_codes$code, "_img.png", sep="")
contrasting_codes$path_roi <- paste(image_dir, "/", contrasting_codes$code, "_roi.png", sep="")
contrasting_codes$path_seg <- paste(image_dir, "/", contrasting_codes$code, "_seg.png", sep="")
contrasting_codes$path_slc <- paste(image_dir, "/", contrasting_codes$code, "_slc.png", sep="")
ggp_image <- function(fn,sp,resizepct=0.1)
{
im_all <- image_read(fn)
im_all <- image_resize(im_all, geometry= geometry_size_percent(width= resizepct,height= resizepct))
print(im_all)
scale_this <- 0.8
ggp <- ggdraw() + draw_image(im_all,scale=scale_this) + draw_plot_label(sp,x=0,y=1,hjust=0,fontface="italic",size=12)
return(ggp)
}
crop_roi <- function(z)
{
w <- matrix(as.integer(z[[1]][1,,]),nrow=image_info(z)$width)
xvals <- which(rowSums(w)>0)
yvals <- which(colSums(w)>0)
xmin <- xvals[1]
ymin <- yvals[1]
deltax <- xvals[length(xvals)] - xvals[1]
deltay <- yvals[length(yvals)] - yvals[1]
z_cropped <- image_crop(z,geometry_area(width=deltax,height=deltay,x_off=xmin,y_off=ymin))
return(z_cropped)
}
images_all <- lapply(1:nrow(contrasting_codes),function(i) {
im_im <- ggp_image(fn=contrasting_codes$path_image[i],
sp=contrasting_codes$species[i])
im_roi <- ggp_image(fn=contrasting_codes$path_roi[i],
sp="")
#im_seg <- ggp_image(fn=contrasting_codes$path_seg[i],
#          sp="")
im_slc <- ggp_image(fn=contrasting_codes$path_slc[i],
sp="")
im_seg_cropped <- crop_roi(image_read(contrasting_codes$path_seg[i]))
im_seg_zoom <- ggdraw() + draw_image(im_seg_cropped,scale=0.8)
return(list(im_im,im_slc,im_roi,im_seg_zoom))
})
contrasting_codes
ggp_image <- function(fn,sp,resizepct=0.1)
{
im_all <- image_read(fn)
im_all <- image_resize(im_all, geometry= geometry_size_percent(width= resizepct,height= resizepct))
print(im_all)
scale_this <- 0.8
ggp <- ggdraw() + draw_image(im_all,scale=scale_this) + draw_plot_label(sp,x=0,y=1,hjust=0,fontface="italic",size=12)
return(ggp)
}
crop_roi <- function(z)
{
w <- matrix(as.integer(z[[1]][1,,]),nrow=image_info(z)$width)
xvals <- which(rowSums(w)>0)
yvals <- which(colSums(w)>0)
xmin <- xvals[1]
ymin <- yvals[1]
deltax <- xvals[length(xvals)] - xvals[1]
deltay <- yvals[length(yvals)] - yvals[1]
z_cropped <- image_crop(z,geometry_area(width=deltax,height=deltay,x_off=xmin,y_off=ymin))
return(z_cropped)
}
images_all <- lapply(1:nrow(contrasting_codes),function(i) {
im_im <- ggp_image(fn=contrasting_codes$path_image[i],
sp=contrasting_codes$species[i])
im_roi <- ggp_image(fn=contrasting_codes$path_roi[i],
sp="")
#im_seg <- ggp_image(fn=contrasting_codes$path_seg[i],
#          sp="")
im_slc <- ggp_image(fn=contrasting_codes$path_slc[i],
sp="")
im_seg_cropped <- crop_roi(image_read(contrasting_codes$path_seg[i]))
im_seg_zoom <- ggdraw() + draw_image(im_seg_cropped,scale=0.8)
return(list(im_im,im_slc,im_roi,im_seg_zoom))
})
pwd()
ls()
dir()
install.packages("BIEN")
library(BIEN)
??BIEN_occurrence_box
w = BIEN_plot_dataset("Gentry Transect Dataset")
str(w)
3+4
sqrt(4)
3+4
sqrt(4)
3+4
sqrt(4)
print(mydataframe)
mydataframe = data.frame(firstVariable=c("a","b","c"),secondVariable=c(10,20,30))
print(mydataframe)
setwd("~/Documents/ASU/teaching/bio 423 - spring 2019/BIO 423 labs/Lab 5 - Macroecology")
View(mydataframe)
View(mydataframe)
library(data.table) # install this package if needed
data_gentry = read.csv("gentry_transects.csv")
str(data_gentry)
# how many plots do we have to work with?
length(unique(data_gentry$plot_name))
# note that this is a subset of the full Gentry dataset most useful for teaching purposes.
# The MOBOT link above includes the entire dataset.
```
Some of the species are missing names due to being un-identifiable in the field:
```{r na}
table(is.na(data_gentry$scrubbed_species_binomial))
# first, convert the names from factors to characters so that we can add new levels
data_gentry$scrubbed_species_binomial = as.character(data_gentry$scrubbed_species_binomial)
# which is a useful command you can use to find the indices of items in a vector
index_sp_no_name = which(is.na(data_gentry$scrubbed_species_binomial))
data_gentry$scrubbed_species_binomial[index_sp_no_name] =
paste("Species",1:length(index_sp_no_name))
# how many rows have missing counts?
table(is.na(data_gentry$individual_count))
# set observations with missing counts to have a count of 1
data_gentry$individual_count[which(is.na(data_gentry$individual_count))] = 1
gentry_counts_list = by(data_gentry, data_gentry$plot_name, function(x) {
# repeat the data, then convert to factors for use in the table command
# then count up all the entries
result_table = table(factor(rep(x$scrubbed_species_binomial, x$individual_count)))
# create a data frame summarizing this subset
df_table = data.frame(plot_name=x$plot_name[1], # keep the plot_name as primary key
latitude=x$latitude[1],
longitude=x$longitude[1],
species=names(result_table), # pull table names
abundance=as.numeric(result_table)) # pull table counts
return(df_table)
})
# convert results to a data frame
gentry_counts = rbindlist(gentry_counts_list)
str(gentry_counts)
levels(gentry_counts$plot_name
)
ALLPAHUA
gentry_counts %>% filter(plot_name %in% c("ALLPAHUA", "CAPEIRA", "YANAM2"))
library(dplyr)
gentry_counts %>% filter(plot_name %in% c("ALLPAHUA", "CAPEIRA", "YANAM2"))
plot(longitude~latitude,data=gentry_counts)
gentry_counts[gentry_counts$latitude < 10 & gentry_counts$latitude> 0 & gentry_counts$longitude >-80,]
gentry_counts[gentry_counts$latitude < 10 & gentry_counts$latitude> 0 & gentry_counts$longitude >-80,"plot_name"]
unique(gentry_counts[gentry_counts$latitude < 10 & gentry_counts$latitude> 0 & gentry_counts$longitude >-80,"plot_name"])
unique(gentry_counts[gentry_counts$latitude < 10 & gentry_counts$latitude> 0 & gentry_counts$longitude >-80 & gentry_counts$longitude < -75,"plot_name"])
unique(gentry_counts[gentry_counts$latitude < 5 & gentry_counts$latitude> 0 & gentry_counts$longitude >-80 & gentry_counts$longitude < -75,"plot_name"])
unique(gentry_counts[gentry_counts$latitude < 5 & gentry_counts$latitude> 0 & gentry_counts$longitude >-80 & gentry_counts$longitude < -79,"plot_name"])
unique(gentry_counts[gentry_counts$latitude < 5 & gentry_counts$latitude> 0 & gentry_counts$longitude >-80 & gentry_counts$longitude < -77,"plot_name"])
gentry_counts %>% filter(plot_name %in% c("MAQUIPUC", "BILSA", "CALIMA"))
gc_ss = gentry_counts %>% filter(plot_name %in% c("MAQUIPUC", "BILSA", "CALIMA"))
gc_ss$species
grepl("Species",gc_ss$species)
plot(longitude~latitude,data=gentry_counts)
plot(longitude~latitude,data=gc_ss)
map('world')
assumes Lab 5
library(dplyr)
gc_ss = gentry_counts %>% filter(plot_name %in% c("MAQUIPUC", "BILSA", "CALIMA"))
gc_ss = gc_ss[!grepl("Species",gc_ss$species),]
library(maps)
map('world')
plot(longitude~latitude,data=gc_ss)
plot(longitude~latitude,data=gc_ss)
map('world')
points(longitude~latitude,data=gc_ss)
points(latitude~longitude,data=gc_ss)
points(latitude~longitude,data=gc_ss,col='red)
'
`
```
assumes Lab 5
library(dplyr)
gc_ss = gentry_counts %>% filter(plot_name %in% c("MAQUIPUC", "BILSA", "CALIMA"))
gc_ss = gc_ss[!grepl("Species",gc_ss$species),]
library(maps)
map('world',xlim=c(-180,20,ylim=c(-60,60))
points(latitude~longitude,data=gc_ss,col='red')
assumes Lab 5
library(dplyr)
gc_ss = gentry_counts %>% filter(plot_name %in% c("MAQUIPUC", "BILSA", "CALIMA"))
gc_ss = gc_ss[!grepl("Species",gc_ss$species),]
library(maps)
map('world',xlim=c(-180,20),ylim=c(-60,60))
points(latitude~longitude,data=gc_ss,col='red')
assumes Lab 5
library(dplyr)
gc_ss = gentry_counts %>% filter(plot_name %in% c("MAQUIPUC", "BILSA", "CALIMA"))
gc_ss = gc_ss[!grepl("Species",gc_ss$species),]
library(maps)
map('world',xlim=c(-180,20),ylim=c(-60,60))
points(latitude~longitude,data=gc_ss,col='red')
with(gc_ss,text(longitude,latitude,plot_name))
assumes Lab 5
library(dplyr)
gc_ss = gentry_counts %>% filter(plot_name %in% c("MAQUIPUC", "BILSA", "CALIMA"))
gc_ss = gc_ss[!grepl("Species",gc_ss$species),]
library(maps)
map('world',xlim=c(-180,20),ylim=c(-60,60))
points(latitude~longitude,data=gc_ss,col='red')
assumes Lab 5
library(dplyr)
gc_ss = gentry_counts %>% filter(plot_name %in% c("MAQUIPUC", "BILSA", "CALIMA"))
gc_ss = gc_ss[!grepl("Species",gc_ss$species),]
library(maps)
map('world',xlim=c(-70,10),ylim=c(-60,60))
points(latitude~longitude,data=gc_ss,col='red')
assumes Lab 5
library(dplyr)
gc_ss = gentry_counts %>% filter(plot_name %in% c("MAQUIPUC", "BILSA", "CALIMA"))
gc_ss = gc_ss[!grepl("Species",gc_ss$species),]
library(maps)
map('world',xlim=c(-100,10),ylim=c(-60,60))
points(latitude~longitude,data=gc_ss,col='red')
assumes Lab 5
library(dplyr)
gc_ss = gentry_counts %>% filter(plot_name %in% c("MAQUIPUC", "BILSA", "CALIMA"))
gc_ss = gc_ss[!grepl("Species",gc_ss$species),]
library(maps)
map('world',xlim=c(-130,10),ylim=c(-60,60))
points(latitude~longitude,data=gc_ss,col='red')
names(gc_ss)
write.csv(gc_ss,file='gc_ss.csv',row.names=F)
write.csv(gc_ss,file='~/Desktop/gc_ss.csv',row.names=F)
