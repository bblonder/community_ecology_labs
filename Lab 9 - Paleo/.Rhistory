marion.taxa
marion.taxa[[1]]
marion.taxa$taxon.list
louise.taxa <- compile_taxa(louise.dl[[1]], list.name ='WhitmoreFull')
print(louise.taxa)
louise.taxa$counts
louise.taxa$taxon.list
print(louise.taxa$taxon.list)
louise.taxa$taxon.list?tran
?tran
# convert pollen counts into relative abundances, assuming that pollen counts
# are proportional to species abundance
marion.alnus <- tran(x = marion.dl$counts, method ='percent')[,'Alnus']
# convert pollen counts into relative abundances, assuming that pollen counts
# are proportional to species abundance
marion.alnus <- tran(x = marion.data$counts, method ='percent')[,'Alnus']
marion.data$counts
marion.taxa$counts
louise.dl
print(louise.dl)
louise.dl$`1670`
louise.dl$`1670`$sample.meta
# convert pollen counts into relative abundances, assuming that pollen counts
# are proportional to species abundance
marion.alnus <- tran(x = marion.taxa$counts, method ='percent')[,'Alnus']
marion.alnus <- tran(x = marion.taxa$counts, method ='percent')
marion.alnus
# calculate taxon/count information for each site
marion.taxa <- compile_taxa(marion.dl[[1]], list.name ='P25')
louise.taxa <- compile_taxa(louise.dl[[1]], list.name ='P25')
print(louise.taxa$taxon.list)
# convert pollen counts into relative abundances, assuming that pollen counts
# are proportional to species abundance
marion.alnus <- tran(x = marion.taxa$counts, method ='percent')[,'Alnus']
louise.alnus <- tran(x = western.comp$louise$counts, method ='percent')[,'Alnus']
marion.alnus
# get age information
marion.data$sample.meta$age
# get age information
marion.taxa$sample.meta$age
louise.alnus <- tran(x = louise.taxa$counts, method ='percent')[,'Alnus']
# get age information
marion.age = marion.taxa$sample.meta$age
louise.age = louise.taxa$sample.meta$age
louise.age
print(louise.taxa$taxon.list)
marion.age
data.frame(Age=marion.age, Percent.Alnus=marion.alnus)
data.frame(Site='Marion',Age=marion.age, Percent.Alnus=marion.alnus)
df_marion.louise = rbind(
data.frame(Site='Marion',Age=marion.age, Percent.Alnus=marion.alnus),
data.frame(Site='Louise',Age=louise.age, Percent.Alnus=louise.alnus)
)
data.frame(Site='Marion',Age=marion.age, Percent.Alnus=marion.alnus)df_marion.louise
df_marion.louise
library(ggplot2)
ggplot(df_marion.louise, aes(x=Age,y=Percent.Alnus,col=Site) + geom_line()
)
ggplot(df_marion.louise, aes(x=Age,y=Percent.Alnus,col=Site)) + geom_line()
ggplot(df_marion.louise, aes(x=Age,y=Percent.Alnus,col=Site)) +
geom_line() +
theme_minimal()
ggplot(df_marion.louise, aes(x=Age,y=Percent.Alnus,col=Site)) +
geom_line() +
theme_minimal() +
xlab("Years before present (radiocarbon date)") +
ylab("Relative abundance of Alnus")
louise.dl
louise.dl$long
louise.dl[[1]]$lab.data
louise.dl[[1]]$sample.meta
get_site(louise.data)
get_site(louise.data)$long
core.pct <- data.frame(tran(marion.taxa$counts, method = "percent"))
marion.pct <- data.frame(tran(marion.taxa$counts, method = "percent"))
get_site(louise.data)$longmarion.data$sample.meta$age
marion.data$sample.meta$age
marion.taxa$sample.meta$age
marion.pct <- data.frame(tran(marion.taxa$counts, method = "percent"))
marion.pct$age <- marion.age
marion.pct <- data.frame(tran(marion.taxa$counts, method = "percent"))
marion.pct$age <- marion.age
marion.pct.strati <- chooseTaxa(marion.pct, max.abun = 4)
?chooseTaxa
marion.pct.strati <- chooseTaxa(marion.pct)
Stratiplot(age ~ ., core.pct, sort = 'wa', type = 'poly',
ylab = "Years Before Present")
Stratiplot(age ~ ., marion.pct.strati, sort = 'wa', type = 'poly',
ylab = "Years Before Present")
Stratiplot(age ~ ., marion.pct.?strati, sort = 'wa', type = 'poly',
ylab = "Years Before Present")
?convhull
?convexhull
?chull
useall.datasets <- get_dataset(loc = c(-140, 45, -110, 65),
datasettype = 'pollen',
taxonname = 'Pinus%')
all.datasets <- get_dataset(loc = c(-140, 45, -110, 65),
datasettype = 'pollen',
taxonname = 'Pinus%')
all.datasets
all.datasets$long
get_site(all.datasets)$long
library("ggmap")
library("ggplot2")
library("reshape2")
library("Bchron")
library("gridExtra")
get_site(all.datasets)$longi
install.packages("ggmap")
install.packages("Bchron")
# coordinates
all.coords <- get_site(all.datasets)$long
map <- map_data('world')
ggplot(data = data.frame(map), aes(long, lat)) +
geom_polygon(aes(group=group), color = 'steelblue', alpha = 0.2) +
geom_point(data = all.coords, aes(x = long, y = lat)) +
xlab('Longitude West') +
ylab('Latitude North') +
coord_map(projection = 'albers', lat0 = 40, lat1 = 65,
xlim = c(-140, -110), ylim = c(45, 70))
all.coords
# coordinates
all.coords <- get_site(all.datasets)
# coordinates
all.coords <- get_site(all.datasets)
map <- map_data('world')
ggplot(data = data.frame(map), aes(long, lat)) +
geom_polygon(aes(group=group), color = 'steelblue', alpha = 0.2) +
geom_point(data = all.coords, aes(x = long, y = lat)) +
xlab('Longitude West') +
ylab('Latitude North') +
coord_map(projection = 'albers', lat0 = 40, lat1 = 65,
xlim = c(-140, -110), ylim = c(45, 70))
library("mapproj")
install.packages("mapproj")
library("mapproj")
map <- map_data('world')
ggplot(data = data.frame(map), aes(long, lat)) +
geom_polygon(aes(group=group), color = 'steelblue', alpha = 0.2) +
geom_point(data = all.coords, aes(x = long, y = lat)) +
xlab('Longitude West') +
ylab('Latitude North') +
coord_map(projection = 'albers', lat0 = 40, lat1 = 65,
xlim = c(-140, -110), ylim = c(45, 70))
map <- map_data('world')
ggplot(data = data.frame(map), aes(long, lat)) +
geom_polygon(aes(group=group), color = 'steelblue', alpha = 0.2) +
geom_point(data = all.coords, aes(x = long, y = lat)) +
xlab('Longitude West') +
ylab('Latitude North') +
coord_map(projection = 'albers', lat0 = 40, lat1 = 65,
xlim = c(-140, -110), ylim = c(20, 70))
?getdataset
get_dataset
?get_dataset
map <- map_data('world')
ggplot(data = data.frame(map), aes(long, lat)) +
geom_polygon(aes(group=group), color = 'steelblue', alpha = 0.2) +
geom_point(data = all.coords, aes(x = long, y = lat)) +
xlab('Longitude West') +
ylab('Latitude North') +
coord_map(projection = 'albers', lat0 = 40, lat1 = 65,
xlim = c(-140, -110), ylim = c(45, 70))
# download the data for these sites
all.downloads <- get_download(all.datasets, verbose = FALSE)
# filter the data
top.pinus <- function(x) {
# first convert the pollen counts to proportions
x.pct <- tran(x$counts, method = "proportion")
#  Cores must span at least the last 5000 years (and have no missing dates):
old.enough <- max(x$sample.meta$age) > 5000 & !all(is.na(x$sample.meta$age))
#  Find the highest row index associated with Pinus presence over 5%
oldest.row <- ifelse(any(x.pct[, 'Pinus'] > .05 & old.enough),
max(which(x.pct[, 'Pinus'] > .05)),
0)
#  return a data.frame with site name & location, and the age and date type
#  (since some records have ages in radiocarbon years) for the oldest Pinus.
out <- if (oldest.row > 0) {
data.frame(site = x$dataset$site.data$site.name,
lat = x$dataset$site.data$lat,
long = x$dataset$site.data$long,
age = x$sample.meta$age[oldest.row],
date = x$sample.meta$age.type[oldest.row])
} else {
return(NULL)
}
return(out)
}
top.pinus
?rbindlist
summary.pinus <- do.call("rbind", lapply(compiled.cores, top.pinus))
# get species data
compiled.cores <- compile_taxa(all.downloads, 'P25')
compiled.cores
head(compiled.cores)
head(compiled.cores,n=2)
# filter the data
top.pinus <- function(x) {
# first convert the pollen counts to proportions
x.pct <- tran(x$counts, method = "proportion")
#  Cores must span at least the last 5000 years (and have no missing dates):
old.enough <- max(x$sample.meta$age) > 5000 & !all(is.na(x$sample.meta$age))
#  Find the highest row index associated with Pinus presence over 5%
oldest.row <- ifelse(any(x.pct[, 'Pinus'] > .05 & old.enough),
max(which(x.pct[, 'Pinus'] > .05)),
0)
#  return a data.frame with site name & location, and the age and date type
#  (since some records have ages in radiocarbon years) for the oldest Pinus.
out <- if (oldest.row > 0) {
data.frame(site = x$dataset$site.data$site.name,
lat = x$dataset$site.data$lat,
long = x$dataset$site.data$long,
age = x$sample.meta$age[oldest.row],
date = x$sample.meta$age.type[oldest.row])
} else {
return(NULL)
}
return(out)
}
summary.pinus <- do.call("rbind", lapply(compiled.cores, top.pinus))
summary.pinus
# keep only data that has had the radiocarbon dates calibrated
summary.pinus.calibrated = summary.pinus[summary.pinus$date=="Calibrated radiocarbon years BP",]
head(summary.pinus.calibrated)
plot(age~lat,data=summary.pinus.calibrated)
plot(age~lat,data=summary.pinus.calibrated,ylim=c(0,20000)
)
radio.years <- summary.pinus$date %in% 'Radiocarbon years BP'
sryears <- sum(radio.years, na.rm = TRUE)
# BChronCalibrate is in the BChron package:
calibrated <- BchronCalibrate(summary.pinus$age[radio.years],
ageSds = rep(100, sryears),
calCurves = rep('intcal13', sryears))
?BchronCalibrate
??calibrate
library("Bchron")
calibrated <- BchronCalibrate(summary.pinus$age[radio.years],
ageSds = rep(100, sryears),
calCurves = rep('intcal13', sryears))
summary.pinus$age
# keep only sites that have dates within the last 40 kyr
summary.pinus <- summary.pinus[summary.pinus$age < 40000,]
# for data that have uncalibrated radiocarbon ages, convert them to calibrated ages
radio.years <- summary.pinus$date %in% 'Radiocarbon years BP'
sryears <- sum(radio.years, na.rm = TRUE)
# BChronCalibrate is in the BChron package:
calibrated <- BchronCalibrate(summary.pinus$age[radio.years],
ageSds = rep(100, sryears),
calCurves = rep('intcal13', sryears))
# apply the 'top.pinus' function to each site, then bind results into a dataframe
summary.pinus <- do.call("rbind", lapply(compiled.cores, top.pinus))
# keep only sites that have dates within the last 40 kyr
summary.pinus <- summary.pinus[summary.pinus$age < 40000 & summary.pinus$age > 0,]
# for data that have uncalibrated radiocarbon ages, convert them to calibrated ages
radio.years <- summary.pinus$date %in% 'Radiocarbon years BP'
sryears <- sum(radio.years, na.rm = TRUE)
# BChronCalibrate is in the BChron package:
calibrated <- BchronCalibrate(summary.pinus$age[radio.years],
ageSds = rep(100, sryears),
calCurves = rep('intcal13', sryears))
# apply the 'top.pinus' function to each site, then bind results into a dataframe
summary.pinus <- do.call("rbind", lapply(compiled.cores, top.pinus))
# keep only sites that have dates within the last 40 kyr
summary.pinus <- summary.pinus[summary.pinus$age < 40000 & summary.pinus$age > 1000,]
# for data that have uncalibrated radiocarbon ages, convert them to calibrated ages
radio.years <- summary.pinus$date %in% 'Radiocarbon years BP'
sryears <- sum(radio.years, na.rm = TRUE)
# BChronCalibrate is in the BChron package:
calibrated <- BchronCalibrate(summary.pinus$age[radio.years],
ageSds = rep(100, sryears),
calCurves = rep('intcal13', sryears))
calibrated
#  we want the weighted means from 'calibrated'
wmean.date <- function(x) sum(x$ageGrid*x$densities / sum(x$densities))
summary.pinus$age[radio.years] <- sapply(calibrated, wmean.date)
summary.pinus <- na.omit(summary.pinus)
summary.pinus
plot(age~lat,data=summary.pinus,ylim=c(0,20000)
)
plot(age~lat,data=summary.pinus,ylim=c(0,20000))
summary(summary.pinus)
# apply the 'top.pinus' function to each site, then bind results into a dataframe
summary.pinus <- do.call("rbind", lapply(compiled.cores, top.pinus))
summary(summary.pinus)
# make a plot of
ggplot(summary.pinus, aes(x=age,y=lat)) + geom_point()
# apply the 'top.pinus' function to each site, then bind results into a dataframe
summary.pinus <- do.call("rbind", lapply(compiled.cores, top.pinus))
# note that some of the ages are suspect...
# and that the date types are either radiocarbon, or calendar/calibrated radiocarbon dates
summary(summary.pinus)
# keep only sites that have dates within the last 40 kyr
summary.pinus <- summary.pinus[summary.pinus$age < 40000 & summary.pinus$age > 1000,]
# for data that have uncalibrated radiocarbon ages, convert them to calibrated ages
radio.years <- summary.pinus$date %in% 'Radiocarbon years BP'
sryears <- sum(radio.years, na.rm = TRUE)
# use the 'intcal13' calibration
calibrated.dates <- BchronCalibrate(summary.pinus$age[radio.years],
ageSds = rep(100, sryears),
calCurves = rep('intcal13', sryears))
# define a weighted mean giving more evidence to points on the calibration curve
# with more data
wmean.date <- function(x) sum(x$ageGrid*x$densities / sum(x$densities))
# replace the uncalibrated ages with the calibrated ages
summary.pinus$age[radio.years] <- sapply(calibrated.dates, wmean.date)
# make a plot of
ggplot(summary.pinus, aes(x=age,y=lat)) + geom_point()
summary.pinus
ggplot(summary.pinus, aes(x=age,y=lat)) +
geom_point() +
xlab("Years before present") +
ylab("Latitude (degrees")
louise.pct <- data.frame(tran(louise.taxa$counts, method = "percent"))
louise.pct$age <- louise.age
louise.pct.strati <- chooseTaxa(louise.pct)
Stratiplot(age ~ ., louise.pct.strati, sort = 'wa', type = 'poly',
ylab = "Years Before Present")
unlink('Lab 9_cache', recursive = TRUE)
unlink('Lab 9_cache', recursive = TRUE)
unlink('Lab 9_cache', recursive = TRUE)
library(neotoma
)
?compile_taxa
library(neotoma)
library(analogue)
library(ggplot2)
marion <- get_site(sitename = 'Marion Lake%')
louise <- get_site(sitename = 'Louise Pond%')
marion.data <- get_dataset(marion)
louise.data <- get_dataset(louise)
louise.data[[1]]$site.data
# get underlying data for each site
marion.dl <- get_download(marion.data)
louise.dl <- get_download(louise.data)
# calculate taxon/count information for each site
# we have to match the counts against a known species list, here the 'P25' list
# see the help for this function for details if curious
marion.taxa <- compile_taxa(marion.dl[[1]], list.name ='P25')
louise.taxa <- compile_taxa(louise.dl[[1]], list.name ='P25')
marion.alnus <- tran(x = marion.taxa$counts, method ='percent')[,'Alnus']
louise.alnus <- tran(x = louise.taxa$counts, method ='percent')[,'Alnus']
# get age information
marion.age = marion.taxa$sample.meta$age
louise.age = louise.taxa$sample.meta$age
# assemble final dataframe of alnus relative abundance
df_marion.louise = rbind(
data.frame(Site='Marion',Age=marion.age, Percent.Alnus=marion.alnus),
data.frame(Site='Louise',Age=louise.age, Percent.Alnus=louise.alnus)
)
# make stratigraphic plot
marion.pct <- data.frame(tran(marion.taxa$counts, method = "percent"))
marion.pct$age <- marion.age
marion.pct.strati <- chooseTaxa(marion.pct)
Stratiplot(age ~ ., marion.pct.strati, sort = 'wa', type = 'poly',
ylab = "Years Before Present")
marion.data[[1]]$site.data
louise.pct <- data.frame(tran(louise.taxa$counts, method = "percent"))
louise.pct$age <- louise.age
louise.pct.strati <- chooseTaxa(louise.pct)
Stratiplot(age ~ ., louise.pct.strati, sort = 'wa', type = 'poly',
ylab = "Years Before Present")
marion.pct <- data.frame(tran(marion.taxa$counts, method = "percent"))
marion.pct$age <- marion.age
marion.pct.strati <- chooseTaxa(marion.pct)
Stratiplot(age ~ ., marion.pct.strati, sort = 'wa', type = 'poly',
ylab = "Years Before Present")
library("ggmap")
library("ggplot2")
library("reshape2")
library("Bchron")
library("gridExtra")
library("mapproj")
# find pollen datasets containing Pinus in British Columbia
# note that loc is in (lonW, latS, lonE, latN) format
all.datasets <- get_dataset(loc = c(-140, 45, -110, 65),
datasettype = 'pollen',
taxonname = 'Pinus%')
# extract coordinates from the search results
all.coords <- get_site(all.datasets)
# download the data for all of these sites
# (this may take a few minutes, ignore warnings, be patient)
all.downloads <- get_download(all.datasets, verbose = FALSE)
# match species names
compiled.cores <- compile_taxa(all.downloads, 'P25')
# filter the data to find the first occurrence of pinus in the dataset at above 5% relative abundance
# discarding also any cores that span less than 5 kya - present
top.pinus <- function(x) {
# first convert the pollen counts to proportions
x.pct <- tran(x$counts, method = "proportion")
#  Cores must span at least the last 5000 years (and have no missing dates):
old.enough <- max(x$sample.meta$age) > 5000 & !all(is.na(x$sample.meta$age))
#  Find the highest row index associated with Pinus presence over 5%
oldest.row <- ifelse(any(x.pct[, 'Pinus'] > .05 & old.enough),
max(which(x.pct[, 'Pinus'] > .05)),
0)
#  return a data.frame with site name & location, and the age and date type
#  (since some records have ages in radiocarbon years) for the oldest Pinus.
out <- if (oldest.row > 0) {
data.frame(site = x$dataset$site.data$site.name,
lat = x$dataset$site.data$lat,
long = x$dataset$site.data$long,
age = x$sample.meta$age[oldest.row],
date = x$sample.meta$age.type[oldest.row])
} else {
return(NULL)
}
return(out)
}
# apply the 'top.pinus' function to each site, then bind results into a dataframe
summary.pinus <- do.call("rbind", lapply(compiled.cores, top.pinus))
# keep only sites that have dates within the last 40 kyr
summary.pinus <- summary.pinus[summary.pinus$age < 40000 & summary.pinus$age > 1000,]
# for data that have uncalibrated radiocarbon ages, convert them to calibrated ages
radio.years <- summary.pinus$date %in% 'Radiocarbon years BP'
sryears <- sum(radio.years, na.rm = TRUE)
# use the 'intcal13' calibration
calibrated.dates <- BchronCalibrate(summary.pinus$age[radio.years],
ageSds = rep(100, sryears),
calCurves = rep('intcal13', sryears))
# define a weighted mean giving more evidence to points on the calibration curve
# with more data
wmean.date <- function(x) sum(x$ageGrid*x$densities / sum(x$densities))
# replace the uncalibrated ages with the calibrated ages
summary.pinus$age[radio.years] <- sapply(calibrated.dates, wmean.date)
map <- map_data('world')
ggplot(data = data.frame(map), aes(long, lat)) +
geom_polygon(aes(group=group), color = 'steelblue', alpha = 0.2) +
geom_point(data = summary.pinus, aes(x = long, y = lat,col=age)) +
xlab('Longitude West') +
ylab('Latitude North') +
coord_map(projection = 'albers', lat0 = 40, lat1 = 65,
xlim = c(-140, -110), ylim = c(45, 70))
# Question 5
map <- map_data('world')
ggplot(data = data.frame(map), aes(long, lat)) +
geom_polygon(aes(group=group), color = 'steelblue', alpha = 0.2) +
geom_point(data = summary.pinus, aes(x = long, y = lat,col=age)) +
xlab('Longitude West') +
ylab('Latitude North') +
coord_map(projection = 'albers', lat0 = 40, lat1 = 65,
xlim = c(-140, -110), ylim = c(45, 70)) +
scale_color_gradient(low="orange",high="purple")
# Question 5
map <- map_data('world')
ggplot(data = data.frame(map), aes(long, lat)) +
geom_polygon(aes(group=group), color = 'steelblue', alpha = 0.2) +
geom_point(data = summary.pinus, aes(x = long, y = lat,col=age)) +
xlab('Longitude West') +
ylab('Latitude North') +
coord_map(projection = 'albers', lat0 = 40, lat1 = 65,
xlim = c(-140, -110), ylim = c(45, 70)) +
scale_color_gradient(low="orange",mid="orange",high="purple")
ggplot(data = data.frame(map), aes(long, lat)) +
geom_polygon(aes(group=group), color = 'steelblue', alpha = 0.2) +
geom_point(data = summary.pinus, aes(x = long, y = lat,col=age)) +
xlab('Longitude West') +
ylab('Latitude North') +
coord_map(projection = 'albers', lat0 = 40, lat1 = 65,
xlim = c(-140, -110), ylim = c(45, 70)) +
scale_color_brewer(palette="Spectral")
?scale_color_continuous
ggplot(data = data.frame(map), aes(long, lat)) +
geom_polygon(aes(group=group), color = 'steelblue', alpha = 0.2) +
geom_point(data = summary.pinus, aes(x = long, y = lat,col=age)) +
xlab('Longitude West') +
ylab('Latitude North') +
coord_map(projection = 'albers', lat0 = 40, lat1 = 65,
xlim = c(-140, -110), ylim = c(45, 70)) +
scale_color_gradient2(low="red",mid="gren",high="blue")
ggplot(data = data.frame(map), aes(long, lat)) +
geom_polygon(aes(group=group), color = 'steelblue', alpha = 0.2) +
geom_point(data = summary.pinus, aes(x = long, y = lat,col=age)) +
xlab('Longitude West') +
ylab('Latitude North') +
coord_map(projection = 'albers', lat0 = 40, lat1 = 65,
xlim = c(-140, -110), ylim = c(45, 70)) +
scale_color_gradient2(low="red",mid="green",high="blue")
# Question 5
map <- map_data('world')
ggplot(data = data.frame(map), aes(long, lat)) +
geom_polygon(aes(group=group), color = 'steelblue', alpha = 0.2) +
geom_point(data = summary.pinus, aes(x = long, y = lat,col=age)) +
xlab('Longitude West') +
ylab('Latitude North') +
coord_map(projection = 'albers', lat0 = 40, lat1 = 65,
xlim = c(-140, -110), ylim = c(45, 70)) +
scale_color_gradient2(low="yellow",high="blue")
ggplot(data = data.frame(map), aes(long, lat)) +
geom_polygon(aes(group=group), color = 'steelblue', alpha = 0.2) +
geom_point(data = summary.pinus, aes(x = long, y = lat,col=age)) +
xlab('Longitude West') +
ylab('Latitude North') +
coord_map(projection = 'albers', lat0 = 40, lat1 = 65,
xlim = c(-140, -110), ylim = c(45, 70)) +
scale_color_gradient(low="yellow",high="blue")
# Question 6
lm(age~lat,data=summary.pinus[summary.pinus$age < 21000,])
summary.pinus[summary.pinus$age < 21000,]
# Question 6
m_lgm_migration = lm(age~lat,data=summary.pinus[summary.pinus$age < 21000,])
summary(m_lgm_migration)
# Question 6
m_lgm_migration = lm(lat~age,data=summary.pinus[summary.pinus$age < 21000,])
summary(m_lgm_migration)
# the slope estimate is -417 years per degree,
coeff(m_lgm_migration)[2]
coef(m_lgm_migration)[2]
coef(m_lgm_migration)[2]*1000
coef(m_lgm_migration)[2])
coef(m_lgm_migration)[2]
coef(m_lgm_migration)[2]*111
