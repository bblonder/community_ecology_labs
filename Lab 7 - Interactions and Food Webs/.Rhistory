)
plot(myweb_graph,layout=layout.davidson.harel)
plot(myweb_graph,layout=layout.auto,vertex.size=0)
plot(myweb_graph,layout=layout.auto,vertex.size=0,edge.size=0.1)
plot(myweb_graph,layout=layout.auto,vertex.size=0,edge.arrow.size=0.1)
plot(myweb_graph,layout=layout.auto,vertex.size=0,edge.arrow.size=0.1)?
?
`
)
)
`
TrophInd
?TrophInd
library(NetIndices)
install.packages("NetIndices")
# calculate a trophic index based on the flow through each species
tl <- TrophInd(fw1)
library(NetIndices)
# calculate a trophic index based on the flow through each species
tl <- TrophInd(fw1)
# calculate a trophic index based on the flow through each species
tl <- TrophInd(myweb_graph)
# pick a web again
myweb = foodwebs_all_clean$Canton
myweb_graph = graph.adjacency(myweb)
layout <- layout.fruchterman.reingold(myweb_graph)
# calculate a trophic index based on the flow through each species
tl <- TrophInd(myweb_graph)
myweb_graph = graph.adjacency(myweb,mode='directed')
myweb_graph
# calculate a trophic index based on the flow through each species
tl <- TrophInd(myweb_graph)
?TrophInd
# calculate a trophic index based on the flow through each species
tl <- TrophInd(myweb)
layout[,2] <- tl$TL
plot(myweb_graph, layout=layout)
?layout
# calculate a trophic index based on the total flow through to each species
tl <- TrophInd(myweb)
# arrange species randomly
layout_visual <- layout.random(myweb_graph)
# set y-coordinate to the trophic position
layout_visual[,2] <- tl$TL
plot(myweb_graph, layout=layout_visual,vertex.size=NA)
plot(myweb_graph, layout=layout_visual,vertex.size=0)
plot(myweb_graph, layout=layout_visual,vertex.size=0)
plot(myweb_graph,
layout=layout_visual,
vertex.size=0,
edge.arrow=size=0.1,
vertex.label.color='black')
plot(myweb_graph,
layout=layout_visual,
vertex.size=0,
edge.arrow.size=0.1,
vertex.label.color='black')
# igraph plotting is different than ggplot2...
plot(myweb_graph,
layout=layout_visual,
vertex.size=0,
edge.arrow.size=0.1,
vertex.label.color='black',
vertex.label.size=0.5)
plot(myweb_graph,
layout=layout_visual,
vertex.size=0,
edge.arrow.size=0.1,
vertex.label.color='black',
vertex.label.size=0.1)
tl <- TrophInd(myweb)
# arrange species randomly
layout_visual <- layout.random(myweb_graph)
# set y-coordinate to the trophic position
# add a bit of jitter to the y-axis coordinate
layout_visual[,2] <- jitter(tl$TL)
# igraph plotting is different than ggplot2...
plot(myweb_graph,
layout=layout_visual,
vertex.size=0,
edge.arrow.size=0.1,
vertex.label.color='black',
vertex.label.size=0.1)
?jitter
v
tl <- TrophInd(myweb)
# arrange species randomly
layout_visual <- layout.random(myweb_graph)
# set y-coordinate to the trophic position
# add a bit of jitter to the y-axis coordinate
layout_visual[,2] <- jitter(tl$TL,amount=0.1)
# igraph plotting is different than ggplot2...
plot(myweb_graph,
layout=layout_visual,
vertex.size=0,
edge.arrow.size=0.1,
vertex.label.color='black',
vertex.label.size=0.1)
# arrange species randomly
layout_visual <- layout.random(myweb_graph)
# set y-coordinate to the trophic position
# add a bit of jitter to the y-axis coordinate
layout_visual[,2] <- jitter(tl$TL,amount=0.05)^2
# igraph plotting is different than ggplot2...
plot(myweb_graph,
layout=layout_visual,
vertex.size=0,
edge.arrow.size=0.1,
vertex.label.color='black',
vertex.label.size=0.1)
plot(myweb_graph,
layout=layout_visual,
vertex.size=0,
edge.arrow.size=0.25,
vertex.label.color='black',
vertex.label.size=0.05)
?plot.igraph
plot(myweb_graph,
layout=layout_visual,
vertex.size=0,
edge.arrow.size=0.25,
vertex.label.color='black',
vertex.label.cex=0.25)
tl
hist(tl$TL)
tl$TL
table(tl$TL
)
xtabs(tl$TL)
myweb_graph
degree(myweb_graph)
which.max(degree(myweb_graph))
sort(degree(myweb_graph))
diag(myweb)
which(diag(myweb)==1)
# pick a web again
myweb = foodwebs_all_clean$Troy
which(diag(myweb)==1)
?Degree
?degree
which(loop(myweb_graph))
which_loop(myweb_graph))
which_loop(myweb_graph)
V(myweb_graph)$name[which_loop(myweb_graph)]
degree(myweb_graph)
degreevals = degree(myweb_graph)
print(sort(degreevals))
print(head(sort(degreevals)))
head(sort(degreevals))
?sort
degreevals
tl
tl$TL
plot(degreevals, tl$TL)
?degree
degreevals = degree(myweb_graph,mode='out')
degreevals
degreevals = degree(myweb_graph,mode='in')
degreevals
plot(degreevals_in, tl$TL)
degreevals_out = degree(myweb_graph,mode='out')
degreevals_in = degree(myweb_graph,mode='in')
head(sort(degreevals_in,decreasing=FALSE))
plot(degreevals_in, tl$TL)
degreevals_in
lapply(foodwebs_all_clean, degree, mode='in')
foodwebs_all_clean
lapply(foodwebs_all_clean, function(x) {
myweb_graph_this = graph.adjacency(x,mode='directed')
degree_in_vals = degree(myweb_graph_this, mode='in')
mean_degree_in = mean(degree_in_vals)
return(mean_degree_in)
})
lapply(foodwebs_all_clean, function(x) {
myweb_graph_this = graph.adjacency(x,mode='directed')
degree_in_vals = degree(myweb_graph_this, mode='in')
median_degree_in = median(degree_in_vals)
return(median_degree_in)
})
sapply(foodwebs_all_clean, function(x) {
myweb_graph_this = graph.adjacency(x,mode='directed')
degree_in_vals = degree(myweb_graph_this, mode='in')
median_degree_in = median(degree_in_vals)
return(median_degree_in)
})
sapply(foodwebs_all_clean, function(x) {
myweb_graph_this = graph.adjacency(x,mode='directed')
degree_in_vals = degree(myweb_graph_this, mode='in')
mean_degree_in = mean(degree_in_vals)
return(median_degree_in)
})
sapply(foodwebs_all_clean, function(x) {
myweb_graph_this = graph.adjacency(x,mode='directed')
degree_in_vals = degree(myweb_graph_this, mode='in')
mean_degree_in = mean(degree_in_vals)
return(mean_degree_in)
})
mean_degree_in_all = sapply(foodwebs_all_clean, function(x) {
myweb_graph_this = graph.adjacency(x,mode='directed')
degree_in_vals = degree(myweb_graph_this, mode='in')
mean_degree_in = mean(degree_in_vals)
return(mean_degree_in)
})
as.data.frame(mean_degree_in_all)
mean_degree_in_all_df = data.frame(
WebName=names(mean_degree_in_all),
DegreeIn=mean_degree_in_all)
mean_degree_in_all_df
# we also have metadata available for all the sites...
foodweb_metadata = read.csv("thoms_towns_metadata.csv)
str(foodweb_metadata
"
)
""
# we also have metadata available for all the sites...
foodweb_metadata = read.csv("thoms_towns_metadata.csv")
str(foodweb_metadata)
# join the degree data with the metadata using the WebName column
left_join(foodweb_metadata, mean_degree_in_all, by='WebName)
'
''
# join the degree data with the metadata using the WebName column
left_join(foodweb_metadata, mean_degree_in_all, by='WebName')
# join the degree data with the metadata using the WebName column
join(foodweb_metadata, mean_degree_in_all, by='WebName')
str(foodweb_metadata)
?left_join
# join the degree data with the metadata using the WebName column
inner_join(tbl(foodweb_metadata), tbl(mean_degree_in_all), by='WebName')
# join the degree data with the metadata using the WebName column
inner_join(foodweb_metadata, mean_degree_in_all, by='WebName')
mean_degree_in_all
# join the degree data with the metadata using the WebName column
inner_join(foodweb_metadata, mean_degree_in_all_df, by='WebName')
# join the degree data with the metadata using the WebName column
mean_degree_joined = inner_join(foodweb_metadata, mean_degree_in_all_df, by='WebName')
strmean_degree_joined
mean_degree_joined = inner_join(foodweb_metadata, mean_degree_in_all_df, by='WebName')
mean_degree_joined
str(mean_degree_joined)
mean_degree_joined
foodweb_metadata
# load metadata for all the sites...
foodweb_metadata = read.csv("thoms_towns_metadata.csv")
str(foodweb_metadata)
# join the degree data with the metadata using the WebName column
mean_degree_joined = inner_join(foodweb_metadata, mean_degree_in_all_df, by='WebName')
mean_degree_joined
ggplot(mean_degree_joined,aes(x=Location,y=DegreeIn)) +
geom_boxplot()
E(myweb_graph)
length(E(myweb_graph))
mean_degree_joined
library(readxl)
library(dplyr)
library(reshape2)
library(ggplot2)
foodweb_metadata = read.csv("thoms_towns_metadata.csv")
str(foodweb_metadata)
files = dir(path='thoms_towns_excel', pattern='*xls', full.names=TRUE)
file_basename = gsub(".xls", "", sapply(files, basename), fixed=TRUE)
head(file_basename)
foodwebs_all = lapply(files, read_excel)
foodwebs_all_clean = lapply(foodwebs_all, function(x) {
x = x %>% select(-1)
mindim = min(dim(x))
x = x[1:mindim, 1:mindim]
speciesnames = names(x)
x_matrix = as.matrix(x)
dimnames(x_matrix) = list(speciesnames, speciesnames)
return(x_matrix)
})
names(foodwebs_all_clean) = file_basename
foodwebs_all
foodwebs_all %>% select(-1)
?select
foodwebs_all_clean = lapply(foodwebs_all, function(x) {
x = x[,-1]
mindim = min(dim(x))
x = x[1:mindim, 1:mindim]
speciesnames = names(x)
x_matrix = as.matrix(x)
dimnames(x_matrix) = list(speciesnames, speciesnames)
return(x_matrix)
})
names(foodwebs_all_clean) = file_basename
foodwebs_all_clean = lapply(foodwebs_all, function(x) {
x = x[,-1]
mindim = min(dim(x))
x = x[1:mindim, 1:mindim]
speciesnames = names(x)
x_matrix = as.matrix(x)
dimnames(x_matrix) = list(speciesnames, speciesnames)
return(x_matrix)
})
names(foodwebs_all_clean) = file_basename
foodwebs_all_clean
myweb_canton = foodwebs_all_clean$Canton
tl_canton <- TrophInd(myweb_canton)
# arrange species randomly
layout_visual_canton <- layout.random(myweb_canton)
# set y-coordinate to the trophic position
# add a bit of jitter to the y-axis coordinate
layout_visual_canton[,2] <- jitter(tl_canton$TL,amount=0.05)
# igraph plotting is different than ggplot2...
plot(myweb_canton,
layout=layout_visual_canton,
vertex.size=0,
edge.arrow.size=0.25,
vertex.label.color='black',
vertex.label.cex=0.5)
# 1. plot Canton web
myweb_canton = foodwebs_all_clean$Canton
tl_canton <- TrophInd(myweb_canton)
# arrange species randomly
layout_visual_canton <- layout.random(myweb_canton)
myweb_canton
c
layout_visual_canton <- layout.random(myweb_canton)
myweb = foodwebs_all_clean$Troy
myweb_graph = graph.adjacency(myweb,mode='directed')
# calculate a trophic index based on the total flow through to each species
tl <- TrophInd(myweb)
# arrange species randomly
layout_visual <- layout.random(myweb_graph)
# 1. plot Canton web
myweb_canton = foodwebs_all_clean$Canton
myweb_canton_graph = graph.adjacency(myweb_canton,mode='directed')
tl_canton <- TrophInd(myweb_canton)
# arrange species randomly
layout_visual_canton <- layout.random(myweb_canton_graph)
# set y-coordinate to the trophic position
# add a bit of jitter to the y-axis coordinate
layout_visual_canton[,2] <- jitter(tl_canton$TL,amount=0.05)
# igraph plotting is different than ggplot2...
plot(myweb_canton,
layout=layout_visual_canton,
vertex.size=0,
edge.arrow.size=0.25,
vertex.label.color='black',
vertex.label.cex=0.5)
myweb_canton_graph
warnings()
myweb_canton_graph = graph.adjacency(myweb_canton,mode='directed')
# 1. plot Canton web
myweb_canton = foodwebs_all_clean$Canton
myweb_canton_graph = graph.adjacency(myweb_canton,mode='directed')
tl_canton <- TrophInd(myweb_canton)
# arrange species randomly
layout_visual_canton <- layout.random(myweb_canton_graph)
# set y-coordinate to the trophic position
# add a bit of jitter to the y-axis coordinate
layout_visual_canton[,2] <- jitter(tl_canton$TL,amount=0.05)
# igraph plotting is different than ggplot2...
plot(myweb_canton,
layout=layout_visual_canton,
vertex.size=0,
edge.arrow.size=0.25,
vertex.label.color='black',
vertex.label.cex=0.5)
# igraph plotting is different than ggplot2...
plot(myweb_canton_graph,
layout=layout_visual_canton,
vertex.size=0,
edge.arrow.size=0.25,
vertex.label.color='black',
vertex.label.cex=0.5)
warnings()
?igraph.plotting
plot(myweb_canton_graph,
layout=layout_visual_canton,
vertex.size=0,
edge.arrow.size=0.25,
vertex.label.color='black',
vertex.label.cex=0.5)
tl_canton
tl_canton[which.max(tl_canton$TL),]
tl$TL
tl$TL==1
which(tl$TL==1<2)
which(tl$TL<2)
length(which(tl$TL<2))
t[which(tl$TL<2),]
tl[which(tl$TL<2),]
tl[which(tl$TL<2)[1;2],]
tl[which(tl$TL<2)[1:2],]
tl[which(tl$TL<2)[
which(diag(x)==1)],]
which(diag(myweb_canton)==1)
degreevals_out = degree(myweb_graph,mode='out')
degreevals_in = degree(myweb_graph,mode='in')
which(diag(myweb_canton)==1)degreevals_out
degreevals_out
which.max(degreevals_out)
which.max(degreevals_out)
degreevals_out[which.max(degreevals_out)]
degreevals_out[which.max(degreevals_out)]
degreevals_in[which.max(degreevals_in)]
# 6. Specialization and predators
plot(degreevals_in, tl$TL)
# 6. Specialization and predators
plot( tl$TL~degreevals_in)
summary(lm(tl$TL~degreevals_in))
connectance_all = sapply(foodwebs_all_clean, function(x) {
myweb_graph_this = graph.adjacency(x,mode='directed')
L = length(E(myweb_graph_this))
S = length(V(myweb_graph_this))
connectance = L/S^2
return(connectance)
})
connectance_all
mean_connectance_in_all_df = data.frame(
WebName=names(mean_degree_in_all),
Connectance=connectance_all)
connectance_all = sapply(foodwebs_all_clean, function(x) {
myweb_graph_this = graph.adjacency(x,mode='directed')
L = length(E(myweb_graph_this))
S = length(V(myweb_graph_this))
connectance = L/S^2
return(connectance)
})
mean_connectance_in_all_df = data.frame(
WebName=names(connectance_all),
Connectance=connectance_all)
mean_connectance_in_all_df
mean_connectance_in_all_df = data.frame(
WebName=names(connectance_all),
Connectance=connectance_all)
mean_connectance_joined = inner_join(foodweb_metadata, mean_connectance_in_all_df, by='WebName')
mean(connectance)
sd(connectance)
connectance_all = sapply(foodwebs_all_clean, function(x) {
myweb_graph_this = graph.adjacency(x,mode='directed')
L = length(E(myweb_graph_this))
S = length(V(myweb_graph_this))
connectance = L/S^2
return(connectance)
})
mean(connectance_all)
sd(connectance_all)
mean_connectance_joined
mean_connectance_joined_grassland = mean_connectance_joined[mean_connectance_joined$Habitat %in% c("Pasture grassland", "Tussock grassland"),]
mean_connectance_joined_grassland
t.test(Connectance~Habitat,data=mean_connectance_joined_grassland)
ggplot(mean_degree_joined,aes(x=Habitat,y=Connectance)) +
geom_boxplot()
ggplot(mean_connectance_joined,aes(x=Habitat,y=Connectance)) +
geom_boxplot()
foodweb_metadata = read.csv("thoms_towns_metadata.csv")
str(foodweb_metadata)
foodweb_metadata$Habitat
mean_connectance_joined_forest = mean_connectance_joined[mean_connectance_joined$Habitat %in% c("Pine forest", "Broadleaf forest"),]
mean_connectance_joined_forest
mean_connectance_joined_forest = mean_connectance_joined[mean_connectance_joined$Habitat %in% c("Pine forest", "Broadleaf forest"),]
t.test(Connectance~Habitat,data=mean_connectance_joined_forest)
# There is no significant difference in connectance in grazed vs ungrazed grassland (p=0.52)
library(readxl) # install this package if needed
library(dplyr)
library(reshape2)
library(ggplot2)
# load metadata for all the sites...
foodweb_metadata = read.csv("thoms_towns_metadata.csv")
str(foodweb_metadata)
# list all files in the directory
files = dir(path='thoms_towns_excel', pattern='*xls', full.names=TRUE)
head(files)
# also extract the name of the food web from the filename
# first use basename to get the filename with no path
# then use gsub to delete the file extension
file_basename = gsub(".xls", "", sapply(files, basename), fixed=TRUE)
head(file_basename)
# run read_excel for every food web
foodwebs_all = lapply(files, read_excel)
# list elements are accessed as [[1]], [[2]], etc. -
# let's look at the first food web
head(foodwebs_all[[1]])
# the first column is incorrectly set to the names of the species
# so we should drop the 1st column of each data frame
# this also relies on using an `anonynmous function`, as the second
# argument to the lapply function.
foodwebs_all_clean = lapply(foodwebs_all, function(x) {
# drop the first column
x = x[,-1]
# make the data frame square by removing extra columns
mindim = min(dim(x))
x = x[1:mindim, 1:mindim]
# keep the species names
speciesnames = names(x)
# convert to matrix (needed later on...)
x_matrix = as.matrix(x)
dimnames(x_matrix) = list(speciesnames, speciesnames)
# return only the processed matrix
return(x_matrix)
})
sapply(foodwebs_all_clean, dim)
# the foodwebs are now square matrices
# with each row and column corresponding to a species pair
# last, we need to set the names of the list to the names of the food webs
names(foodwebs_all_clean) = file_basename
myweb = foodwebs_all_clean$Troy
myweb_melted = melt(as.array(myweb))
ggplot(myweb_melted,aes(x=Var1,y=Var2,fill=value)) +
geom_tile() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(text = element_text(size=5))
foodweb_metadata = read.csv("thoms_towns_metadata.csv")
str(foodweb_metadata)
knitr::opts_chunk$set(echo = TRUE)
# load metadata for all the sites...
foodweb_metadata = read.csv("thoms_towns_metadata.csv")
names(foodweb_metadata) = c("WebName","Habitat","Location")
str(foodweb_metadata)
