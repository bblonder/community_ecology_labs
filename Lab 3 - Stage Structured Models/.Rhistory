for (i in 2:n_steps)
{
delta_rabbit = reproduction_rate_rabbit*N_rabbit[i-1] - prey_capture_rate * N_rabbit[i-1] * N_fox[i-1]
delta_fox = predator_conversion_efficiency * N_rabbit[i-1] * N_fox[i-1] - mortality_rate_fox * N_fox[i-1]
N_rabbit[i] = N_rabbit[i-1] + delta_rabbit * delta_t
N_fox[i] = N_fox[i-1] + delta_fox * delta_t
}
plot(N_rabbit,type='l')
lines(N_fox,col='red')
n_steps = 1000
N_rabbit = rep(NA, n_steps)
N_fox = rep(NA, n_steps)
N_rabbit[1] = 100
N_fox[1] = 10
delta_t = 0.01
reproduction_rate_rabbit = 3
prey_capture_rate = 0.1
predator_conversion_efficiency = 0.5
mortality_rate_fox = 0.2
for (i in 2:n_steps)
{
delta_rabbit = reproduction_rate_rabbit*N_rabbit[i-1] - prey_capture_rate * N_rabbit[i-1] * N_fox[i-1]
delta_fox = predator_conversion_efficiency * N_rabbit[i-1] * N_fox[i-1] - mortality_rate_fox * N_fox[i-1]
N_rabbit[i] = N_rabbit[i-1] + delta_rabbit * delta_t
N_fox[i] = N_fox[i-1] + delta_fox * delta_t
}
plot(N_rabbit,type='l')
lines(N_fox,col='red')
n_steps = 10000
N_rabbit = rep(NA, n_steps)
N_fox = rep(NA, n_steps)
N_rabbit[1] = 100
N_fox[1] = 10
delta_t = 0.01
reproduction_rate_rabbit = 3
prey_capture_rate = 0.1
predator_conversion_efficiency = 0.5
mortality_rate_fox = 0.2
for (i in 2:n_steps)
{
delta_rabbit = reproduction_rate_rabbit*N_rabbit[i-1] - prey_capture_rate * N_rabbit[i-1] * N_fox[i-1]
delta_fox = predator_conversion_efficiency * N_rabbit[i-1] * N_fox[i-1] - mortality_rate_fox * N_fox[i-1]
N_rabbit[i] = N_rabbit[i-1] + delta_rabbit * delta_t
N_fox[i] = N_fox[i-1] + delta_fox * delta_t
}
plot(N_rabbit,type='l')
lines(N_fox,col='red')
n_steps = 10000
N_rabbit = rep(NA, n_steps)
N_fox = rep(NA, n_steps)
N_rabbit[1] = 100
N_fox[1] = 10
delta_t = 0.01
reproduction_rate_rabbit = 3
prey_capture_rate = 0.1
predator_conversion_efficiency = 0.2
mortality_rate_fox = 0.5
for (i in 2:n_steps)
{
delta_rabbit = reproduction_rate_rabbit*N_rabbit[i-1] - prey_capture_rate * N_rabbit[i-1] * N_fox[i-1]
delta_fox = predator_conversion_efficiency * N_rabbit[i-1] * N_fox[i-1] - mortality_rate_fox * N_fox[i-1]
N_rabbit[i] = N_rabbit[i-1] + delta_rabbit * delta_t
N_fox[i] = N_fox[i-1] + delta_fox * delta_t
}
plot(N_rabbit,type='l')
lines(N_fox,col='red')
n_steps = 10000
N_rabbit = rep(NA, n_steps)
N_fox = rep(NA, n_steps)
N_rabbit[1] = 100
N_fox[1] = 10
delta_t = 0.01
reproduction_rate_rabbit = 2
prey_capture_rate = 0.1
predator_conversion_efficiency = 0.2
mortality_rate_fox = 0.5
for (i in 2:n_steps)
{
delta_rabbit = reproduction_rate_rabbit*N_rabbit[i-1] - prey_capture_rate * N_rabbit[i-1] * N_fox[i-1]
delta_fox = predator_conversion_efficiency * N_rabbit[i-1] * N_fox[i-1] - mortality_rate_fox * N_fox[i-1]
N_rabbit[i] = N_rabbit[i-1] + delta_rabbit * delta_t
N_fox[i] = N_fox[i-1] + delta_fox * delta_t
}
plot(N_rabbit,type='l')
lines(N_fox,col='red')
n_steps = 10000
N_rabbit = rep(NA, n_steps)
N_fox = rep(NA, n_steps)
N_rabbit[1] = 100
N_fox[1] = 10
delta_t = 0.01
reproduction_rate_rabbit = 2
prey_capture_rate = 0.1
predator_conversion_efficiency = 0.2
mortality_rate_fox = 0.25
for (i in 2:n_steps)
{
delta_rabbit = reproduction_rate_rabbit*N_rabbit[i-1] - prey_capture_rate * N_rabbit[i-1] * N_fox[i-1]
delta_fox = predator_conversion_efficiency * N_rabbit[i-1] * N_fox[i-1] - mortality_rate_fox * N_fox[i-1]
N_rabbit[i] = N_rabbit[i-1] + delta_rabbit * delta_t
N_fox[i] = N_fox[i-1] + delta_fox * delta_t
}
plot(N_rabbit,type='l')
lines(N_fox,col='red')
n_steps = 10000
N_rabbit = rep(NA, n_steps)
N_fox = rep(NA, n_steps)
N_rabbit[1] = 100
N_fox[1] = 10
delta_t = 0.01
reproduction_rate_rabbit = 2
prey_capture_rate = 0.1
predator_conversion_efficiency = 0.2
mortality_rate_fox = 0.1
for (i in 2:n_steps)
{
delta_rabbit = reproduction_rate_rabbit*N_rabbit[i-1] - prey_capture_rate * N_rabbit[i-1] * N_fox[i-1]
delta_fox = predator_conversion_efficiency * N_rabbit[i-1] * N_fox[i-1] - mortality_rate_fox * N_fox[i-1]
N_rabbit[i] = N_rabbit[i-1] + delta_rabbit * delta_t
N_fox[i] = N_fox[i-1] + delta_fox * delta_t
}
plot(N_rabbit,type='l')
lines(N_fox,col='red')
n_steps = 10000
N_rabbit = rep(NA, n_steps)
N_fox = rep(NA, n_steps)
N_rabbit[1] = 100
N_fox[1] = 10
delta_t = 0.01
reproduction_rate_rabbit = 2
prey_capture_rate = 0.1
predator_conversion_efficiency = 0.05
mortality_rate_fox = 0.2
for (i in 2:n_steps)
{
delta_rabbit = reproduction_rate_rabbit*N_rabbit[i-1] - prey_capture_rate * N_rabbit[i-1] * N_fox[i-1]
delta_fox = predator_conversion_efficiency * N_rabbit[i-1] * N_fox[i-1] - mortality_rate_fox * N_fox[i-1]
N_rabbit[i] = N_rabbit[i-1] + delta_rabbit * delta_t
N_fox[i] = N_fox[i-1] + delta_fox * delta_t
}
plot(N_rabbit,type='l')
lines(N_fox,col='red')
n_steps = 10000
N_rabbit = rep(NA, n_steps)
N_fox = rep(NA, n_steps)
N_rabbit[1] = 100
N_fox[1] = 10
delta_t = 0.01
reproduction_rate_rabbit = 2
prey_capture_rate = 0.1
predator_conversion_efficiency = 0.01
mortality_rate_fox = 0.2
for (i in 2:n_steps)
{
delta_rabbit = reproduction_rate_rabbit*N_rabbit[i-1] - prey_capture_rate * N_rabbit[i-1] * N_fox[i-1]
delta_fox = predator_conversion_efficiency * N_rabbit[i-1] * N_fox[i-1] - mortality_rate_fox * N_fox[i-1]
N_rabbit[i] = N_rabbit[i-1] + delta_rabbit * delta_t
N_fox[i] = N_fox[i-1] + delta_fox * delta_t
}
plot(N_rabbit,type='l')
lines(N_fox,col='red')
n_steps = 10000
N_rabbit = rep(NA, n_steps)
N_fox = rep(NA, n_steps)
N_rabbit[1] = 100
N_fox[1] = 10
delta_t = 0.001
reproduction_rate_rabbit = 2
prey_capture_rate = 0.1
predator_conversion_efficiency = 0.01
mortality_rate_fox = 0.2
for (i in 2:n_steps)
{
delta_rabbit = reproduction_rate_rabbit*N_rabbit[i-1] - prey_capture_rate * N_rabbit[i-1] * N_fox[i-1]
delta_fox = predator_conversion_efficiency * N_rabbit[i-1] * N_fox[i-1] - mortality_rate_fox * N_fox[i-1]
N_rabbit[i] = N_rabbit[i-1] + delta_rabbit * delta_t
N_fox[i] = N_fox[i-1] + delta_fox * delta_t
}
plot(N_rabbit,type='l')
lines(N_fox,col='red')
n_steps = 100000
N_rabbit = rep(NA, n_steps)
N_fox = rep(NA, n_steps)
N_rabbit[1] = 100
N_fox[1] = 10
delta_t = 0.001
reproduction_rate_rabbit = 2
prey_capture_rate = 0.1
predator_conversion_efficiency = 0.01
mortality_rate_fox = 0.2
for (i in 2:n_steps)
{
delta_rabbit = reproduction_rate_rabbit*N_rabbit[i-1] - prey_capture_rate * N_rabbit[i-1] * N_fox[i-1]
delta_fox = predator_conversion_efficiency * N_rabbit[i-1] * N_fox[i-1] - mortality_rate_fox * N_fox[i-1]
N_rabbit[i] = N_rabbit[i-1] + delta_rabbit * delta_t
N_fox[i] = N_fox[i-1] + delta_fox * delta_t
}
plot(N_rabbit,type='l')
lines(N_fox,col='red')
n_steps = 100000
N_rabbit = rep(NA, n_steps)
N_fox = rep(NA, n_steps)
N_rabbit[1] = 100
N_fox[1] = 10
delta_t = 0.001
reproduction_rate_rabbit = 2
prey_capture_rate = 0.1
predator_conversion_efficiency = 0.01
mortality_rate_fox = 0.2
for (i in 2:n_steps)
{
delta_rabbit = reproduction_rate_rabbit*N_rabbit[i-1] - prey_capture_rate * N_rabbit[i-1] * N_fox[i-1]
delta_fox = predator_conversion_efficiency * N_rabbit[i-1] * N_fox[i-1] - mortality_rate_fox * N_fox[i-1]
N_rabbit[i] = N_rabbit[i-1] + delta_rabbit * delta_t
N_fox[i] = N_fox[i-1] + delta_fox * delta_t
}
plot(N_rabbit,type='l')
lines(N_fox,col='red')
results = data.frame(time=(1:n_steps)*delta_t),N_rabbit,N_fox)
results = data.frame(time=(1:n_steps)*delta_t,N_rabbit,N_fox)
results
str(results)
plot(N_fox~time)
plot(N_fox~time,data=results)
View(A)
View(A)
View(comadre)
View(comadre)
comadre$mat[[6
]]
comadre$mat[[6]]$matA
comadre$mat[[7]]$matA
comadre$mat[[79]]$matA
comadre$mat[[80]]$matA
comadre$mat[[85]]$matA
comadre$mat[[815]]$matA
lambda(comadre$mat[[815]]$matA)
project_population = function(A,xstart,nsteps)
{
stopifnot(nsteps >=2)
x = matrix(nrow=nrow(A),ncol=nsteps)
x[,1] = xstart
for (i in 2:nsteps)
{
x[,i] = A %*% x[,i-1] # replace x with the old value of x
}
# transpose matrix for easier plotting
return(t(x))
}
sensitivity = function(A) {
w = eigen(A)$vectors # right eigen vectors
v = Conj(solve(w)) # complex conjugate of left eigen vectors
# output of eigenvalues is decreasingly sorted.
return(Re(v[1,] %*% t(w[,1])))
}
elasticity = function(A)
{
s = sensitivity(A)
ev = eigen(A)
lmax = which.max(Re(ev$values))
lambda = Re(ev$values[lmax])
return(s*A / lambda)
}
lambda = function(A)
{
ev = eigen(A) # get eigensystem
lmax = which.max(Re(ev$values)) # find the biggest eigenvalue
lambda = Re(ev$values[lmax]) # store the real part of the largest eigenvalue
return(lambda)
}
stable_age = function(A)
{
# find right eigenvector corresponding to maximum eigenvalue
ev <- eigen(A)
lmax <- which.max(Re(ev$values))
W <- ev$vectors
w <- abs(Re(W[, lmax]))
# return normalized vector
return(w/sum(w))
}
lambda(comadre$mat[[815]]$matA)
lambda(comadre$mat[[816]]$matA)
lambda(comadre$mat[[10]]$matA)
lambda(comadre$mat[[11]]$matA)
lambda(comadre$mat[[15]]$matA)
project_population(comadre$mat[[815]]
comadre$mat[[815]]
)
comadre$mat[[815]]
project_population(comadre$mat[[815]]$matA,c(100,0,0,0,0),10)
project_population(comadre$mat[[815]]$matA,c(100,0,0,0,0),10)
project_population(comadre$mat[[815]]$matA,c(100,0,0,0,0),100)
matplot(project_population(comadre$mat[[815]]$matA,c(100,0,0,0,0),100))
# projection for 100 individuals in largest size class
matplot(project_population(comadre$mat[[815]]$matA,c(0,0,0,0,100),100))
stable_age(comadre$mat[[15]]$matA)
comadre$metadata[15,
[]
comadre$metadata[15,]
elasticity(comadre$mat[[15]]$matA)
?reshape
predictions_predprey = data.frame(time=time_intervals,N_rabbit,N_fox)
knitr::opts_chunk$set(echo = TRUE)
time_intervals = (1:n_steps)*delta_t
predictions_predprey = data.frame(time=time_intervals,N_rabbit,N_fox)
reshape(predictions_predprey,timevar="time")
reshape(predictions_predprey,timevar="time",direction='short')
reshape(predictions_predprey,timevar="time",direction='long')
?melt
reshape(predictions_predprey,varying=c("N_rabbit","N_fox"),direction='long')
reshape(predictions_predprey,varying=c("N_rabbit","N_fox"),timevar="time",direction='long')
reshape(data=predictions_predprey,varying=c("N_rabbit","N_fox"),timevar="time",direction='long')
names(predictions_predprey
)
reshape(data=predictions_predprey,varying=c("N_rabbit","N_fox"),idvar="time",direction='long')
??reshape
??melt
reshape(data=predictions_predprey,varying=2:3,)
reshape(data=predictions_predprey,varying=2:3,direction='short')
reshape(data=predictions_predprey,varying=2:3,direction='long')
reshape(data=predictions_predprey,varying=2:3,direction='long',sep="")
reshape(data=predictions_predprey,varying=2:3,direction='long',idvar=1)
reshape(data=predictions_predprey,varying=names(predictions_predprey)[2:3],direction='long',idvar=1)
reshape(data=predictions_predprey,varying=names(predictions_predprey)[2:3],direction='long')
??Melt
?melt
library(reshape2)
?melt
predictions_predprey = melt.data.frame(predictions_predprey, id.vars="time")
predictions_predprey = melt(predictions_predprey, id.vars="time")
str(predictions_predprey
)
library(ggplot2)
library(reshape2)
# number of time steps in the simulation
n_steps = 4000
delta_t = 0.005 # the smaller delta_t, the more accurate the simulation
# allocate vectors for the predicted abundances over time
N_rabbit = rep(NA, n_steps)
N_fox = rep(NA, n_steps)
time_intervals = (1:n_steps)*delta_t
# initial population sizes for each species
N_rabbit[1] = 100
N_fox[1] = 10
# key parameters for species interactions
reproduction_rate_rabbit = 2
prey_capture_rate = 0.1
predator_conversion_efficiency = 0.01
mortality_rate_fox = 0.2
for (i in 2:n_steps)
{
delta_rabbit = reproduction_rate_rabbit*N_rabbit[i-1] -
prey_capture_rate * N_rabbit[i-1] * N_fox[i-1]
delta_fox = predator_conversion_efficiency * N_rabbit[i-1] * N_fox[i-1] -
mortality_rate_fox * N_fox[i-1]
N_rabbit[i] = N_rabbit[i-1] + delta_rabbit * delta_t
N_fox[i] = N_fox[i-1] + delta_fox * delta_t
}
# combine results in a data frame
predictions_predprey = data.frame(time=time_intervals,N_rabbit,N_fox)
# convert the data frame from 'wide' to 'long' format for easier grouped plotting
predictions_predprey_melted = melt(predictions_predprey, id.vars="time")
# plot predictions as time-series using the melted dataframe
ggplot(predictions_predprey_melted,aes(x=time,y=value,col=variable)) +
geom_line() + theme_minimal() +
xlab("Time") + ylab("Abundance")
# number of time steps in the simulation
n_steps = 4000
delta_t = 0.005 # the smaller delta_t, the more accurate the simulation
# allocate vectors for the predicted abundances over time
N_rabbit = rep(NA, n_steps)
N_fox = rep(NA, n_steps)
time_intervals = (1:n_steps)*delta_t
# initial population sizes for each species
N_rabbit[1] = 100
N_fox[1] = 10
# key parameters for species interactions
reproduction_rate_rabbit = 2
prey_capture_rate = 0.1
predator_conversion_efficiency = 0.01
mortality_rate_fox = 0.8
for (i in 2:n_steps)
{
delta_rabbit = reproduction_rate_rabbit*N_rabbit[i-1] -
prey_capture_rate * N_rabbit[i-1] * N_fox[i-1]
delta_fox = predator_conversion_efficiency * N_rabbit[i-1] * N_fox[i-1] -
mortality_rate_fox * N_fox[i-1]
N_rabbit[i] = N_rabbit[i-1] + delta_rabbit * delta_t
N_fox[i] = N_fox[i-1] + delta_fox * delta_t
}
# combine results in a data frame
predictions_predprey = data.frame(time=time_intervals,N_rabbit,N_fox)
# convert the data frame from 'wide' to 'long' format for easier grouped plotting
predictions_predprey_melted = melt(predictions_predprey, id.vars="time")
# plot predictions as time-series using the melted dataframe
ggplot(predictions_predprey_melted,aes(x=time,y=value,col=variable)) +
geom_line() + theme_minimal() +
xlab("Time") + ylab("Abundance")
# negative feedback on the prey.
library(ggplot2)
library(reshape2)
# number of time steps in the simulation
n_steps = 4000
delta_t = 0.005 # the smaller delta_t, the more accurate the simulation
# allocate vectors for the predicted abundances over time
N_rabbit = rep(NA, n_steps)
N_fox = rep(NA, n_steps)
time_intervals = (1:n_steps)*delta_t
# initial population sizes for each species
N_rabbit[1] = 100
N_fox[1] = 10
# key parameters for species interactions
reproduction_rate_rabbit = 2
prey_capture_rate = 0.1
predator_conversion_efficiency = 0.1
mortality_rate_fox = 0.01
for (i in 2:n_steps)
{
delta_rabbit = reproduction_rate_rabbit*N_rabbit[i-1] -
prey_capture_rate * N_rabbit[i-1] * N_fox[i-1]
delta_fox = predator_conversion_efficiency * N_rabbit[i-1] * N_fox[i-1] -
mortality_rate_fox * N_fox[i-1]
N_rabbit[i] = N_rabbit[i-1] + delta_rabbit * delta_t
N_fox[i] = N_fox[i-1] + delta_fox * delta_t
}
# combine results in a data frame
predictions_predprey = data.frame(time=time_intervals,N_rabbit,N_fox)
# convert the data frame from 'wide' to 'long' format for easier grouped plotting
predictions_predprey_melted = melt(predictions_predprey, id.vars="time")
# plot predictions as time-series using the melted dataframe
ggplot(predictions_predprey_melted,aes(x=time,y=value,col=variable)) +
geom_line() + theme_minimal() +
xlab("Time") + ylab("Abundance")
# negative feedback on the prey.
library(ggplot2)
library(reshape2)
# number of time steps in the simulation
n_steps = 4000
delta_t = 0.005 # the smaller delta_t, the more accurate the simulation
# allocate vectors for the predicted abundances over time
N_rabbit = rep(NA, n_steps)
N_fox = rep(NA, n_steps)
time_intervals = (1:n_steps)*delta_t
# initial population sizes for each species
N_rabbit[1] = 100
N_fox[1] = 10
# key parameters for species interactions
reproduction_rate_rabbit = 2
prey_capture_rate = 0.1
predator_conversion_efficiency = 0.1
mortality_rate_fox = 0.2
for (i in 2:n_steps)
{
delta_rabbit = reproduction_rate_rabbit*N_rabbit[i-1] -
prey_capture_rate * N_rabbit[i-1] * N_fox[i-1]
delta_fox = predator_conversion_efficiency * N_rabbit[i-1] * N_fox[i-1] -
mortality_rate_fox * N_fox[i-1]
N_rabbit[i] = N_rabbit[i-1] + delta_rabbit * delta_t
N_fox[i] = N_fox[i-1] + delta_fox * delta_t
}
# combine results in a data frame
predictions_predprey = data.frame(time=time_intervals,N_rabbit,N_fox)
# convert the data frame from 'wide' to 'long' format for easier grouped plotting
predictions_predprey_melted = melt(predictions_predprey, id.vars="time")
# plot predictions as time-series using the melted dataframe
ggplot(predictions_predprey_melted,aes(x=time,y=value,col=variable)) +
geom_line() + theme_minimal() +
xlab("Time") + ylab("Abundance")
# negative feedback on the prey.
View(comadre$metadata)
comadre$metadata[comadre$metadata$CommonName=="Gila trout",]
names(comadre)
comadre$mat[[134]]
comadre$mat[[134]]$matA
eigen(comadre$mat[[134]]$matA)
Re(eigen(comadre$mat[[134]]$matA))
Re(eigen(comadre$mat[[134]]$matA)$values)
Re(eigen(comadre$mat[[135]]$matA)$values)
Re(eigen(comadre$mat[[136]]$matA)$values)
Re(eigen(comadre$mat[[130]]$matA)$values)
max(Re(eigen(comadre$mat[[130]]$matA)$values))
max(Re(eigen(comadre$mat[[136]]$matA)$values))
max(Re(eigen(comadre$mat[[139]]$matA)$values))
max(Re(eigen(comadre$mat[[239]]$matA)$values))
max(Re(eigen(comadre$mat[[139]]$matA)$values))
max(Re(eigen(comadre$mat[[159]]$matA)$values))
max(Re(eigen(comadre$mat[[199]]$matA)$values))
comadre$mat[[130]]$matA
max(Re(eigen(comadre$mat[[559]]$matA)$values))
max(Re(eigen(comadre$mat[[659]]$matA)$values))
comadre$mat[[659]]
comadre$metadata[659]
comadre$metadata[659,]
max(Re(eigen(comadre$mat[[554]]$matA)$values))
comadre$metadata[6512,]
comadre$metadata[1512,]
comadre$metadata[1512,]
max(Re(eigen(comadre$mat[[1512]]$matA)$values))
max(Re(eigen(comadre$mat[[1511]]$matA)$values))
max(Re(eigen(comadre$mat[[1211]]$matA)$values))
max(Re(eigen(comadre$mat[[1111]]$matA)$values))
max(Re(eigen(comadre$mat[[1121]]$matA)$values))
max(Re(eigen(comadre$mat[[1122]]$matA)$values))
max(Re(eigen(comadre$mat[[1123]]$matA)$values))
max(Re(eigen(comadre$mat[[1125]]$matA)$values))
max(Re(eigen(comadre$mat[[1325]]$matA)$values))
max(Re(eigen(comadre$mat[[1425]]$matA)$values))
max(Re(eigen(comadre$mat[[14256]]$matA)$values))
max(Re(eigen(comadre$mat[[1426]]$matA)$values))
max(Re(eigen(comadre$mat[[426]]$matA)$values))
comadre$metadata[426,]
comadre$mat[[426]]$matA
