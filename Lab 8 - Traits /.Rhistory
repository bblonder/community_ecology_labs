file_basename = gsub(".xls", "", sapply(files, basename), fixed=TRUE)
head(file_basename)
foodwebs_all = lapply(files, read_excel)
foodwebs_all_clean = lapply(foodwebs_all, function(x) {
x = x %>% select(-1)
mindim = min(dim(x))
x = x[1:mindim, 1:mindim]
speciesnames = names(x)
x_matrix = as.matrix(x)
dimnames(x_matrix) = list(speciesnames, speciesnames)
return(x_matrix)
})
names(foodwebs_all_clean) = file_basename
foodwebs_all
foodwebs_all %>% select(-1)
?select
foodwebs_all_clean = lapply(foodwebs_all, function(x) {
x = x[,-1]
mindim = min(dim(x))
x = x[1:mindim, 1:mindim]
speciesnames = names(x)
x_matrix = as.matrix(x)
dimnames(x_matrix) = list(speciesnames, speciesnames)
return(x_matrix)
})
names(foodwebs_all_clean) = file_basename
foodwebs_all_clean = lapply(foodwebs_all, function(x) {
x = x[,-1]
mindim = min(dim(x))
x = x[1:mindim, 1:mindim]
speciesnames = names(x)
x_matrix = as.matrix(x)
dimnames(x_matrix) = list(speciesnames, speciesnames)
return(x_matrix)
})
names(foodwebs_all_clean) = file_basename
foodwebs_all_clean
myweb_canton = foodwebs_all_clean$Canton
tl_canton <- TrophInd(myweb_canton)
# arrange species randomly
layout_visual_canton <- layout.random(myweb_canton)
# set y-coordinate to the trophic position
# add a bit of jitter to the y-axis coordinate
layout_visual_canton[,2] <- jitter(tl_canton$TL,amount=0.05)
# igraph plotting is different than ggplot2...
plot(myweb_canton,
layout=layout_visual_canton,
vertex.size=0,
edge.arrow.size=0.25,
vertex.label.color='black',
vertex.label.cex=0.5)
# 1. plot Canton web
myweb_canton = foodwebs_all_clean$Canton
tl_canton <- TrophInd(myweb_canton)
# arrange species randomly
layout_visual_canton <- layout.random(myweb_canton)
myweb_canton
c
layout_visual_canton <- layout.random(myweb_canton)
myweb = foodwebs_all_clean$Troy
myweb_graph = graph.adjacency(myweb,mode='directed')
# calculate a trophic index based on the total flow through to each species
tl <- TrophInd(myweb)
# arrange species randomly
layout_visual <- layout.random(myweb_graph)
# 1. plot Canton web
myweb_canton = foodwebs_all_clean$Canton
myweb_canton_graph = graph.adjacency(myweb_canton,mode='directed')
tl_canton <- TrophInd(myweb_canton)
# arrange species randomly
layout_visual_canton <- layout.random(myweb_canton_graph)
# set y-coordinate to the trophic position
# add a bit of jitter to the y-axis coordinate
layout_visual_canton[,2] <- jitter(tl_canton$TL,amount=0.05)
# igraph plotting is different than ggplot2...
plot(myweb_canton,
layout=layout_visual_canton,
vertex.size=0,
edge.arrow.size=0.25,
vertex.label.color='black',
vertex.label.cex=0.5)
myweb_canton_graph
warnings()
myweb_canton_graph = graph.adjacency(myweb_canton,mode='directed')
# 1. plot Canton web
myweb_canton = foodwebs_all_clean$Canton
myweb_canton_graph = graph.adjacency(myweb_canton,mode='directed')
tl_canton <- TrophInd(myweb_canton)
# arrange species randomly
layout_visual_canton <- layout.random(myweb_canton_graph)
# set y-coordinate to the trophic position
# add a bit of jitter to the y-axis coordinate
layout_visual_canton[,2] <- jitter(tl_canton$TL,amount=0.05)
# igraph plotting is different than ggplot2...
plot(myweb_canton,
layout=layout_visual_canton,
vertex.size=0,
edge.arrow.size=0.25,
vertex.label.color='black',
vertex.label.cex=0.5)
# igraph plotting is different than ggplot2...
plot(myweb_canton_graph,
layout=layout_visual_canton,
vertex.size=0,
edge.arrow.size=0.25,
vertex.label.color='black',
vertex.label.cex=0.5)
warnings()
?igraph.plotting
plot(myweb_canton_graph,
layout=layout_visual_canton,
vertex.size=0,
edge.arrow.size=0.25,
vertex.label.color='black',
vertex.label.cex=0.5)
tl_canton
tl_canton[which.max(tl_canton$TL),]
tl$TL
tl$TL==1
which(tl$TL==1<2)
which(tl$TL<2)
length(which(tl$TL<2))
t[which(tl$TL<2),]
tl[which(tl$TL<2),]
tl[which(tl$TL<2)[1;2],]
tl[which(tl$TL<2)[1:2],]
tl[which(tl$TL<2)[
which(diag(x)==1)],]
which(diag(myweb_canton)==1)
degreevals_out = degree(myweb_graph,mode='out')
degreevals_in = degree(myweb_graph,mode='in')
which(diag(myweb_canton)==1)degreevals_out
degreevals_out
which.max(degreevals_out)
which.max(degreevals_out)
degreevals_out[which.max(degreevals_out)]
degreevals_out[which.max(degreevals_out)]
degreevals_in[which.max(degreevals_in)]
# 6. Specialization and predators
plot(degreevals_in, tl$TL)
# 6. Specialization and predators
plot( tl$TL~degreevals_in)
summary(lm(tl$TL~degreevals_in))
connectance_all = sapply(foodwebs_all_clean, function(x) {
myweb_graph_this = graph.adjacency(x,mode='directed')
L = length(E(myweb_graph_this))
S = length(V(myweb_graph_this))
connectance = L/S^2
return(connectance)
})
connectance_all
mean_connectance_in_all_df = data.frame(
WebName=names(mean_degree_in_all),
Connectance=connectance_all)
connectance_all = sapply(foodwebs_all_clean, function(x) {
myweb_graph_this = graph.adjacency(x,mode='directed')
L = length(E(myweb_graph_this))
S = length(V(myweb_graph_this))
connectance = L/S^2
return(connectance)
})
mean_connectance_in_all_df = data.frame(
WebName=names(connectance_all),
Connectance=connectance_all)
mean_connectance_in_all_df
mean_connectance_in_all_df = data.frame(
WebName=names(connectance_all),
Connectance=connectance_all)
mean_connectance_joined = inner_join(foodweb_metadata, mean_connectance_in_all_df, by='WebName')
mean(connectance)
sd(connectance)
connectance_all = sapply(foodwebs_all_clean, function(x) {
myweb_graph_this = graph.adjacency(x,mode='directed')
L = length(E(myweb_graph_this))
S = length(V(myweb_graph_this))
connectance = L/S^2
return(connectance)
})
mean(connectance_all)
sd(connectance_all)
mean_connectance_joined
mean_connectance_joined_grassland = mean_connectance_joined[mean_connectance_joined$Habitat %in% c("Pasture grassland", "Tussock grassland"),]
mean_connectance_joined_grassland
t.test(Connectance~Habitat,data=mean_connectance_joined_grassland)
ggplot(mean_degree_joined,aes(x=Habitat,y=Connectance)) +
geom_boxplot()
ggplot(mean_connectance_joined,aes(x=Habitat,y=Connectance)) +
geom_boxplot()
foodweb_metadata = read.csv("thoms_towns_metadata.csv")
str(foodweb_metadata)
foodweb_metadata$Habitat
mean_connectance_joined_forest = mean_connectance_joined[mean_connectance_joined$Habitat %in% c("Pine forest", "Broadleaf forest"),]
mean_connectance_joined_forest
mean_connectance_joined_forest = mean_connectance_joined[mean_connectance_joined$Habitat %in% c("Pine forest", "Broadleaf forest"),]
t.test(Connectance~Habitat,data=mean_connectance_joined_forest)
# There is no significant difference in connectance in grazed vs ungrazed grassland (p=0.52)
library(readxl) # install this package if needed
library(dplyr)
library(reshape2)
library(ggplot2)
# load metadata for all the sites...
foodweb_metadata = read.csv("thoms_towns_metadata.csv")
str(foodweb_metadata)
# list all files in the directory
files = dir(path='thoms_towns_excel', pattern='*xls', full.names=TRUE)
head(files)
# also extract the name of the food web from the filename
# first use basename to get the filename with no path
# then use gsub to delete the file extension
file_basename = gsub(".xls", "", sapply(files, basename), fixed=TRUE)
head(file_basename)
# run read_excel for every food web
foodwebs_all = lapply(files, read_excel)
# list elements are accessed as [[1]], [[2]], etc. -
# let's look at the first food web
head(foodwebs_all[[1]])
# the first column is incorrectly set to the names of the species
# so we should drop the 1st column of each data frame
# this also relies on using an `anonynmous function`, as the second
# argument to the lapply function.
foodwebs_all_clean = lapply(foodwebs_all, function(x) {
# drop the first column
x = x[,-1]
# make the data frame square by removing extra columns
mindim = min(dim(x))
x = x[1:mindim, 1:mindim]
# keep the species names
speciesnames = names(x)
# convert to matrix (needed later on...)
x_matrix = as.matrix(x)
dimnames(x_matrix) = list(speciesnames, speciesnames)
# return only the processed matrix
return(x_matrix)
})
sapply(foodwebs_all_clean, dim)
# the foodwebs are now square matrices
# with each row and column corresponding to a species pair
# last, we need to set the names of the list to the names of the food webs
names(foodwebs_all_clean) = file_basename
myweb = foodwebs_all_clean$Troy
myweb_melted = melt(as.array(myweb))
ggplot(myweb_melted,aes(x=Var1,y=Var2,fill=value)) +
geom_tile() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(text = element_text(size=5))
foodweb_metadata = read.csv("thoms_towns_metadata.csv")
str(foodweb_metadata)
knitr::opts_chunk$set(echo = TRUE)
# load metadata for all the sites...
foodweb_metadata = read.csv("thoms_towns_metadata.csv")
names(foodweb_metadata) = c("WebName","Habitat","Location")
str(foodweb_metadata)
=42+61+305+249
42+61+305+249
data(BCI.env)
data(BCI.env)
library(vegan)
library(tidyverse)
data(BCI)
BCI$Plot=as.numeric(row.names(BCI))
head(BCI)
BCI_short = BCI %>% gather(key="Species",value="Abundance",-Plot)
head(BCI_short)
# or using the reshape2 package (load it first), equivalently...
# BCI_short = melt(BCI, id.vars="Plot", variable.name="Species",value.name="Abundance")
BCI_short_nonzero = BCI_short %>% filter(Abundance>0) %>% arrange(Plot, Species)
head(BCI_short_nonzero)
# load in trait data
traits = read.csv("BCI.trait.csv")
str(traits)
str(traits)
traits$Species = gsub("_",".",traits$genus_species,fixed=TRUE)
traits$Species
traits$Species %in% BCI_short_nonzero$Species
# now join the trait data and the
join(BCI_short_nonzero, traits,by="Species")
# now join the trait data and the
left_join(BCI_short_nonzero, traits,by="Species")
View(BCI_short_nonzero)
View(traits)
# now join the trait data and the
BCI_merged = left_join(BCI_short_nonzero, traits,by="Species")
View(BCI_merged)
View(BCI_merged)
BCI_merged %>% summarize(x=SEED_DRY)
BCI_merged %>% group_by(Plot) %>% summarize(x=SEED_DRY)
BCI_merged %>% group_by(Plot) %>% summarize(x=mean(SEED_DRY))
BCI_merged %>% group_by(Plot) %>% summarize(x=mean(SEED_DRY,na.rm=T))
BCI_merged %>% group_by(Plot) %>% summarize(x=sum(SEED_DRY*Abundance,na.rm=T)/sum(Abundance,na.rm=T))
BCI_merged %>% group_by(Plot) %>% summarize(CWM.seed.mass=sum(SEED_DRY*Abundance,na.rm=T)/sum(Abundance,na.rm=T))
# calculate community weighted means
BCI_merged %>% group_by(Plot) %>% summarize(CWM.seed.mass=sum(SEED_DRY*Abundance,na.rm=T)/sum(Abundance,na.rm=T))
summarize
?summarize
# calculate community weighted means
BCI_summary_seedmass = BCI_merged %>% group_by(Plot) %>% summarize(CWM.seed.mass=sum(SEED_DRY*Abundance,na.rm=T)/sum(Abundance,na.rm=T))
BCI_summary_seedmass
hist(BCI_summary_seedmass$CWM.seed.mass)
hist(BCI_summary_seedmass$CWM.seed.mass,breaks=100)
hist(BCI_summary_seedmass$CWM.seed.mass,breaks=50)
# load environmental data as a tab-separated file
BCI.env = read.csv('BCI.env.txt',sep='\t')
head(BCI.env)
BCI.env$Plot = row.names(BCI.env)
BCI.env$Plot
BCI.env$Plot = as.numeric(ow.names(BCI.env))
BCI.env = read.csv('BCI.env.txt',sep='\t')
BCI.env$Plot = as.numeric(row.names(BCI.env))
BCI_summary_seedmass_env = left_join(BCI_summary_seedmass, BCI.env, by="Plot")
# now join the trait data and the abundance data
# we use left join to identify cases where there are species that are unmatched by traits
BCI_merged = inner_join(BCI_short_nonzero, traits,by="Species")
# calculate community weighted means
BCI_summary_seedmass = BCI_merged %>% group_by(Plot) %>% summarize(CWM.seed.mass=sum(SEED_DRY*Abundance,na.rm=T)/sum(Abundance,na.rm=T))
# load environmental data as a tab-separated file
BCI.env = read.csv('BCI.env.txt',sep='\t')
BCI.env$Plot = as.numeric(row.names(BCI.env))
BCI_summary_seedmass_env = inner_join(BCI_summary_seedmass, BCI.env, by="Plot")
BCI_summary_seedmass_env
plot(CWM.seed.mass~elevation,data=BCI_summary_seedmass_env)
plot(CWM.seed.mass~slope,data=BCI_summary_seedmass_env)
# also add in soil data
BCI.soil = read.csv('BCI.soil.txt', sep='\t')
str(BCI.soil)
BCI.soil$Plot = as.numeric(row.names(BCI.soil))
BCI.soil
# make a combined environmental dataset
BCI.env.combined = inner_join(BCI.env,BCI.soil,by="Plot")
BCI.env.combined
library(vegan)
library(tidyverse)
data(BCI)
BCI$Plot=as.numeric(row.names(BCI))
head(BCI)
BCI_short = BCI %>% gather(key="Species",value="Abundance",-Plot)
head(BCI_short)
# or using the reshape2 package (load it first), equivalently...
# BCI_short = melt(BCI, id.vars="Plot", variable.name="Species",value.name="Abundance")
BCI_short_nonzero = BCI_short %>% filter(Abundance>0) %>% arrange(Plot, Species)
head(BCI_short_nonzero)
# load in trait data
traits = read.csv("BCI.trait.csv")
str(traits)
# create a Species column to match the Species column in BCI_short_nonzero
# this requires changing underscores to periods
# the fixed=TRUE argument means the substitution will interpret the
# find/replace exactly, rather than interpreting them as 'regular expressions'
# which allow matching of more complex patterns (e.g. all numbers, all spaces)
traits$Species = gsub("_",".",traits$genus_species,fixed=TRUE)
# now join the trait data and the abundance data
# we use left join to identify cases where there are species that are unmatched by traits
BCI_merged = inner_join(BCI_short_nonzero, traits,by="Species")
# calculate community weighted means
BCI_summary_trait = BCI_merged %>% group_by(Plot) %>% summarize(CWM.seed.mass=sum(SEED_DRY*Abundance,na.rm=T)/sum(Abundance,na.rm=T))
# load environmental data as a tab-separated file
BCI.env = read.csv('BCI.env.txt',sep='\t')
BCI.env$Plot = as.numeric(row.names(BCI.env))
# also add in soil data
BCI.soil = read.csv('BCI.soil.txt', sep='\t')
BCI.soil$Plot = as.numeric(row.names(BCI.soil))
# make a combined environmental dataset
BCI.env.combined = inner_join(BCI.env,BCI.soil,by="Plot")
BCI_summary_trait_env = inner_join(BCI_summary_trait, BCI.env, by="Plot")
BCI_summary_trait_env
library(vegan)
library(tidyverse)
data(BCI)
BCI$Plot=as.numeric(row.names(BCI))
head(BCI)
BCI_short = BCI %>% gather(key="Species",value="Abundance",-Plot)
head(BCI_short)
# or using the reshape2 package (load it first), equivalently...
# BCI_short = melt(BCI, id.vars="Plot", variable.name="Species",value.name="Abundance")
BCI_short_nonzero = BCI_short %>% filter(Abundance>0) %>% arrange(Plot, Species)
head(BCI_short_nonzero)
# load in trait data
traits = read.csv("BCI.trait.csv")
str(traits)
# create a Species column to match the Species column in BCI_short_nonzero
# this requires changing underscores to periods
# the fixed=TRUE argument means the substitution will interpret the
# find/replace exactly, rather than interpreting them as 'regular expressions'
# which allow matching of more complex patterns (e.g. all numbers, all spaces)
traits$Species = gsub("_",".",traits$genus_species,fixed=TRUE)
# now join the trait data and the abundance data
# we use left join to identify cases where there are species that are unmatched by traits
BCI_merged = inner_join(BCI_short_nonzero, traits,by="Species")
# calculate community weighted means
BCI_summary_trait = BCI_merged %>% group_by(Plot) %>% summarize(CWM.seed.mass=sum(SEED_DRY*Abundance,na.rm=T)/sum(Abundance,na.rm=T))
# load environmental data as a tab-separated file
BCI.env = read.csv('BCI.env.txt',sep='\t')
BCI.env$Plot = as.numeric(row.names(BCI.env))
# also add in soil data
BCI.soil = read.csv('BCI.soil.txt', sep='\t')
BCI.soil$Plot = as.numeric(row.names(BCI.soil))
# make a combined environmental dataset
BCI_env_combined = inner_join(BCI.env,BCI.soil,by="Plot")
BCI_summary_trait_env = inner_join(BCI_summary_trait, BCI_env_combined, by="Plot")
BCI_summary_trait_env
library(ggplot2)
ggplot(BCI_summary_trait_env,aes(x=x,y=y,col=CWM.seed.mass))+geom_point()
ggplot(BCI_summary_trait_env,aes(x=x,y=y,col=CWM.seed.mass))+geom_point()+scale_equal()
ggplot(BCI_summary_trait_env,aes(x=x,y=y,col=CWM.seed.mass))+geom_point()+coord_equal()
ggplot(BCI_summary_trait_env,aes(x=x,y=y,col=CWM.seed.mass))+geom_point()+coord_equal()+scale_color_brewer(palette="Spectral")
ggplot(BCI_summary_trait_env,aes(x=x,y=y,col=CWM.seed.mass))+geom_point()+coord_equal()+scale_color_gradient(
)
ggplot(BCI_summary_trait_env,aes(x=x,y=y,col=CWM.seed.mass))+geom_point()+coord_equal()+scale_color_gradient(low = "red",high="blue")
ggplot(BCI_summary_trait_env,aes(x=x,y=y,col=CWM.seed.mass))+geom_point(size=5)+coord_equal()+scale_color_gradient(low = "red",high="blue")
ggplot(BCI_summary_trait_env,aes(x=x,y=y,col=CWM.seed.mass))+geom_point(size=10)+coord_equal()+scale_color_gradient(low = "red",high="blue")
ggplot(BCI_summary_trait_env,aes(x=x,y=y,col=CWM.seed.mass))+geom_point(size=10)+coord_equal()+scale_color_gradient(low = "red",high="blue") + theme_bw()
ggplot(BCI_summary_trait_env,aes(x=x,y=y,col=CWM.seed.mass))+geom_point(size=5)+coord_equal()+scale_color_gradient(low = "red",high="blue") + theme_bw()
head(BCI_env_combined)
# map the seed mass
ggplot(BCI_summary_trait_env,aes(x=UTM.EW,y=UTM.NS,col=CWM.seed.mass))+geom_point(size=5)+coord_equal()+scale_color_gradient(low = "red",high="blue") + theme_bw()
ggplot(BCI_summary_trait_env,aes(x=x,y=y,col=CWM.seed.mass))+geom_point(size=5)+coord_equal()+scale_color_gradient(low = "red",high="blue") + theme_bw()?t
?t.tst
?t.test
?t.test
library(geometry)
BCI_summary_trait = BCI_merged %>% group_by(Plot) %>% select(SEED_DRY, Shade_VeinTough)
BCI_summary_trait
BCI_summary_trait = BCI_merged %>% group_by(Plot) %>% select(SEED_DRY, Shade_VeinTough) %>% summarize(convhulln)
BCI_summary_trait = BCI_merged %>% group_by(Plot) %>% select(SEED_DRY, Shade_VeinTough) %>% summarize(function(x) { convhulln(x,options="FA")$vol })
BCI_summary_trait = BCI_merged %>% group_by(Plot) %>% select(SEED_DRY, Shade_VeinTough) %>% summarize(function(x) { convhulln(xBCI,options="FA")$vol })
BCI.soil$pH
plot(CWM.seed.mass~pH,data=BCI_summary_trait_env)
plot(CWM.seed.mass~Elevation,data=BCI_summary_trait_env)
View(BCI.env)
View(BCI.env)
plot(CWM.seed.mass~elevation,data=BCI_summary_trait_env)
plot(CWM.seed.mass~slope,data=BCI_summary_trait_env)
traits %>% select(SEED_DRY < 1)
names(traits)
traits %>% filter(SEED_DRY < 1)
traits %>% filter(SEED_DRY < 0.5)
nrow(traits %>% filter(SEED_DRY < 0.5))
nrow(traits)
BCI_summary_trait = BCI_merged %>% group_by(Plot) %>% select(SEED_DRY, Shade_VeinTough) %>% summarize(z=convhulln(cbind(.data[["SEED_DRY"]],.data[["Shade_VeinTough"]]),options="FA")$vol })
BCI_summary_trait = BCI_merged %>% group_by(Plot) %>% select(SEED_DRY, Shade_VeinTough) %>% summarize(z=convhulln(cbind(.data[["SEED_DRY"]],.data[["Shade_VeinTough"]]),options="FA")$vol )
?gls
corAR1
?corAR1
traits[which.max(traits$SEED_DRY),]
# Question 2
BCI_summary_trait = BCI_merged %>% group_by(Plot) %>% summarize(CWM.shade.tough=sum(Shade_LaminaTough*Abundance,na.rm=T)/sum(Abundance,na.rm=T))
# load environmental data as a tab-separated file
BCI.env = read.csv('BCI.env.txt',sep='\t')
BCI.env$Plot = as.numeric(row.names(BCI.env))
# also add in soil data
BCI.soil = read.csv('BCI.soil.txt', sep='\t')
BCI.soil$Plot = as.numeric(row.names(BCI.soil))
# make a combined environmental dataset
BCI_env_combined = inner_join(BCI.env,BCI.soil,by="Plot")
head(BCI_env_combined)
BCI_summary_trait_env = inner_join(BCI_summary_trait, BCI_env_combined, by="Plot")
# Question 2
BCI_summary_trait = BCI_merged %>% group_by(Plot) %>% summarize(CWM.seed.mass=sum(SEED_DRY*Abundance,na.rm=T)/sum(Abundance,na.rm=T),
CWM.shade.tough=sum(Shade_LaminaTough*Abundance,na.rm=T)/sum(Abundance,na.rm=T))
# load environmental data as a tab-separated file
BCI.env = read.csv('BCI.env.txt',sep='\t')
BCI.env$Plot = as.numeric(row.names(BCI.env))
# also add in soil data
BCI.soil = read.csv('BCI.soil.txt', sep='\t')
BCI.soil$Plot = as.numeric(row.names(BCI.soil))
# make a combined environmental dataset
BCI_env_combined = inner_join(BCI.env,BCI.soil,by="Plot")
head(BCI_env_combined)
BCI_summary_trait_env = inner_join(BCI_summary_trait, BCI_env_combined, by="Plot")
ggplot(BCI_summary_trait_env,aes(x=x,y=y,col=CWM.shade.tough)) +
geom_point(size=5)+
coord_equal()+
scale_color_gradient(low = "red",high="blue") +
theme_bw()
View(BCI_env_combined)
View(BCI_summary_trait_env)
# 3. check soil nutrients
summary(lm(CWM.shade.tough ~ B,data=BCI_summary_trait_env))
# 3. check soil nutrients
m_toughness_B = lm(CWM.shade.tough ~ B,data=BCI_summary_trait_env)
summary(m_toughness_B)
traits[which.max(traits$SEED_DRY),]
m_toughness_B = lm(CWM.shade.tough ~ B,data=BCI_summary_trait_env)
summary(m_toughness_B)
m_toughness_P = lm(CWM.shade.tough ~ P,data=BCI_summary_trait_env)
summary(m_toughness_P)
m_toughness_Fe = lm(CWM.shade.tough ~ Fe,data=BCI_summary_trait_env)
summary(m_toughness_Fe)
# 4. predict seed mass
m_seedmass_slope = lm(CWM.seed.mass ~ slope,data=BCI_summary_trait_env)
m_seedmass_slope
summary(m_seedmass_slope)
predict(m_seedmass_slope, slope=15)
predict(m_seedmass_slope, 15)
predict(m_seedmass_slope, newdata=15)
predict(m_seedmass_slope, data.frame(slope=15))
coef(m_seedmass_slope)
coef(m_seedmass_slope)[1] + coef(m_seedmass_slope)[2] * 15
# 5. predict seed mass on steeper slope
# using predict
predict(m_seedmass_slope, data.frame(slope=25))
traits %>% filter(SEED_DRY < 0.23)
traits %>% filter(SEED_DRY < 0.23) %>% summarize(n)
traits %>% filter(SEED_DRY < 0.23) %>% nrow
traits %>% filter(!is.na(SEED_DRY)) %>% nrow
# number of species lost
1 - n_low_mass/n_tot
n_low_mass = traits %>% filter(SEED_DRY < 0.23) %>% nrow
n_tot = traits %>% filter(!is.na(SEED_DRY)) %>% nrow
# number of species lost
1 - n_low_mass/n_tot
# number of species lost
n_low_mass/n_tot
