wlibrary(ggplot2)
# the below line assumes that you have downloaded a copy of the data!
data = read.csv("BIO 423 Spring 2019 Field Data - Sheet1.csv")
str(data)
data$Latitude..decimal.degrees.
as.numeric(data$Latitude..decimal.degrees.)
levels(data$Latitude..decimal.degrees.)
str(data)
levels(data$Property.lot.size..site.area...ft2.)
unique("Yard.type..xeriscaped.1.lawn.5.")
unique(data$Yard.type..xeriscaped.1.lawn.5.)
str(data$Yard.type..xeriscaped.1.lawn.5.)
unique(data$Property.value.Zestimate....)
names(data)
names(data)
data$Number.of.species..shrubs.
data$Yard.type..xeriscaped.1.lawn.5.
summary(data)
library(dplyr)
data %>% select(Yard.type..xeriscaped.1.lawn.5. < 1)
data %>% filter(Yard.type..xeriscaped.1.lawn.5. < 1)
knitr::opts_chunk$set(echo = TRUE)
data_fake = read.csv('clean data subset.csv')
data_fake = read.csv('clean data subset.csv')
str(data_fake)
data_fake = read.csv('clean data subset.csv')
str(data_fake)
map_base = ggplot(places.df) +
theme_classic() +
aes(long,lat,group=group) +
geom_polygon(fill=NA,col='gray') +
# use one of the below two lines
coord_cartesian(xlim=c(-112.2,-111.6)) # you can change these values, or add ylim= to zoom in
# or show the whole extent of the base data, replace coord_cartesian with coord_equal()
# make a layer including the data we care about (say, yard type
map_speciesrichness = map_base +
geom_point(data= class_data, mapping=aes(
x=Longitude..decimal.degrees.,
y=Latitude..decimal.degrees.,
group=NULL,
col= Yard.type..xeriscape.1.lawn.5.)) +
scale_color_gradientn(colors = brewer.pal(9,"Spectral"))
library(rgeos)
library(raster)
library(rgdal)
library(maptools)
library(ggplot2)
library(RColorBrewer)
library(dplyr)
library(ggplot2)
map_base = ggplot(places.df) +
theme_classic() +
aes(long,lat,group=group) +
geom_polygon(fill=NA,col='gray') +
# use one of the below two lines
coord_cartesian(xlim=c(-112.2,-111.6)) # you can change these values, or add ylim= to zoom in
# or show the whole extent of the base data, replace coord_cartesian with coord_equal()
# make a layer including the data we care about (say, yard type
map_speciesrichness = map_base +
geom_point(data= class_data, mapping=aes(
x=Longitude..decimal.degrees.,
y=Latitude..decimal.degrees.,
group=NULL,
col= Yard.type..xeriscape.1.lawn.5.)) +
scale_color_gradientn(colors = brewer.pal(9,"Spectral"))
# load in census data for places and roads
places <- shapefile('tl_2016_04_place/tl_2016_04_place.shp')
places@data$id = rownames(places@data)
places.points = fortify(places, region="id")
places.df = inner_join(places.points, places@data, by="id")
# add or delete place-names as desired below to change map extent
places.df = places.df[places.df$NAME %in% c("Phoenix","Tempe","Gilbert","Chandler","Mesa","Guadalupe","Scottsdale","Fountain Hills","Paradise Valley"),]
# set up a base map
map_base = ggplot(places.df) +
theme_classic() +
aes(long,lat,group=group) +
geom_polygon(fill=NA,col='gray') +
# use one of the below two lines
coord_cartesian(xlim=c(-112.2,-111.6)) # you can change these values, or add ylim= to zoom in
# or show the whole extent of the base data, replace coord_cartesian with coord_equal()
# make a layer including the data we care about (say, yard type
map_speciesrichness = map_base +
geom_point(data= class_data, mapping=aes(
x=Longitude..decimal.degrees.,
y=Latitude..decimal.degrees.,
group=NULL,
col= Yard.type..xeriscape.1.lawn.5.)) +
scale_color_gradientn(colors = brewer.pal(9,"Spectral"))
map_yardtype = map_base +
geom_point(data= data_fake,
mapping=aes(
x=Longitude..decimal.degrees.,
y=Latitude..decimal.degrees.,
group=NULL,
col= Yard.type..xeriscape.1.lawn.5.)) +
scale_color_gradientn(colors = brewer.pal(9,"Spectral"))
map_yardtype
map_yardtype = map_base +
geom_point(data= data_fake, # change this to your real data eventually!
mapping=aes(
x=Longitude..decimal.degrees.,
y=Latitude..decimal.degrees.,
group=NULL,
col= Yard.type..xeriscaped.1.lawn.5.)) + # change to your variable eventually!
scale_color_gradientn(colors = brewer.pal(9,"Spectral"))
map_yardtype
model_yardtype_propertyvalue_propertysize  = lm(Yard.type..xeriscaped.1.lawn.5. ~ Property.value.Zestimate.... + Property.lot.size..site.area...ft2.,data=class_data)
model_yardtype_propertyvalue_propertysize  = lm(Yard.type..xeriscaped.1.lawn.5. ~ Property.value.Zestimate.... + Property.lot.size..site.area...ft2.,
data=class_data)
summary(model_yardtype_propertyvalue_propertysize)
model_yardtype_propertyvalue_propertysize  = lm(Yard.type..xeriscaped.1.lawn.5. ~ Property.value.Zestimate.... + Property.lot.size..site.area...ft2.,
data=data_fake)
summary(model_yardtype_propertyvalue_propertysize)
?shapefile
unlink('Lab - Field Project_cache', recursive = TRUE)
